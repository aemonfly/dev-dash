"use strict";$(document).ready(function(){RepoSelect.init(),Greet.init(),HitApi.init(),RenderTable.init()});var HitApi=function(){function e(){l.$inputForm=$("#input-form")}function t(){l.$inputForm.submit(r)}function n(e){return{type:e.type,date:a(e.created_at),actor:e.actor.display_login,avatar:e.actor.avatar_url,payload:e.payload}}function a(e){return new Date(e).toDateString().slice(0,15).replace(/ 0/g," ")}function r(e){e.preventDefault();var t={url:"https://api.github.com/repos",user:e.currentTarget[0].value,repo:e.currentTarget[1].value,route:"events"},n=t.url+"/"+t.user+"/"+t.repo+"/"+t.route;$.getJSON(n).then(o)}function o(e){var t=["PushEvent","CommitCommentEvent"],a=["IssuesEvent","IssueCommentEvent","ProjectEvent","ProjectCardEvent","ProjectColumnEvent"],r=["CreateEvent","PullRequestEvent","PullRequestReviewEvent","PullRequestReviewCommentEvent"],o=e.filter(function(e){return t.indexOf(e.type)!==-1}).map(n),p=e.filter(function(e){return a.indexOf(e.type)!==-1}).map(n),l=e.filter(function(e){return r.indexOf(e.type)!==-1}).map(n);RenderTable.render(o,p,l)}function p(){e(),t()}var l={};return{init:p}}(),Greet=function(){function e(){var e=Math.floor(Math.random()*r.length);return r[e]}function t(){var e,t,n=new Date,a=n.getHours();return t=LS.getData("momentum-settings")&&void 0!==LS.getData("momentum-settings").userName?LS.getData("momentum-settings").userName:o,e=a<12?"Morning":a>=12&&a<17?"Afternoon":"Evening","Good "+e+", "+t+"."}function n(){$("#greeting").text(t())}function a(){n()}var r=["pal","sexy","cool guy","dork","classy"],o=e();return{init:a}}(),LS=function(){function e(e,t){r&&r.setItem(e,JSON.stringify(t))}function t(e){if(r)return JSON.parse(r.getItem(e))}function n(){if(r)return r.clear()}function a(e){if(r)return r.removeItem(e)}var r=function(){var e,t,n=(new Date).toString();try{return e=window.localStorage,e.setItem(n,n),t=e.getItem(n)===n,e.removeItem(n),t&&e}catch(e){console.log("Problemz!")}}();return{setData:e,getData:t,deleteData:a,clearData:n}}(),RenderTable=function(){function e(){p.$container=$(".table-container")}function t(e,t,o){p.$container.empty(),e.length>0&&n(e),t.length>0&&a(t),o.length>0&&r(o)}function n(e){var t=$(document.createElement("div")),n=$(document.createElement("ul"));e.forEach(function(e){if("PushEvent"===e.type)e.payload.commits.forEach(function(t){var a=$(document.createElement("li")),r=$(document.createElement("img")),o=$(document.createElement("p")),p=$(document.createElement("span")),l=$(document.createElement("a")),c=t.url.replace(/\/\/api./,"//").replace(/\/repos\//,"/").replace(/commits/,"commit");r.attr("src",e.avatar),l.attr("target","_blank").attr("href",c).html('<span class="bolder">'+t.sha.slice(0,6)+"</span>"),p.text('"'+t.message+'"'),o.append('<span class="bolder">'+e.actor+"</span> committed ").append(l).append(" on "+e.date+": ").append(p),a.append(r).append(o),n.append(a)});else{var t=$(document.createElement("li")),a=$(document.createElement("img")),r=$(document.createElement("p")),o=$(document.createElement("span")),p=$(document.createElement("a"));a.attr("src",e.avatar),p.attr("target","_blank").attr("href",e.payload.comment.html_url).html('<span class="bolder">'+e.payload.comment.commit_id.slice(0,6)+"</span>"),o.text('"'+e.payload.comment.body+'"'),r.append('<span class="bolder">'+e.actor+"</span> commented on ").append(p).append(" on "+e.date+": ").append(o),t.append(a).append(r),n.append(t)}}),n.addClass("col-list"),t.addClass("col-1of3").append("<h3>"+e.length+" Commit-Related Events</h3>").append(n),p.$container.append(t)}function a(e){var t=$(document.createElement("div")),n=$(document.createElement("ul"));e.forEach(function(e){var t=$(document.createElement("li")),a=$(document.createElement("img")),r=$(document.createElement("p")),o=$(document.createElement("a"));a.attr("src",e.avatar),o.attr("target","_blank"),"IssuesEvent"===e.type?(o.attr("href",e.payload.issue.html_url).html('<span class="bolder">issue '+e.payload.issue.number+"</span>"),r.append('<span class="bolder">'+e.actor+"</span> "+e.payload.action+" ").append(o).append(" on "+e.date+': "'+e.payload.issue.title+'"'),t.append(a).append(r),n.append(t)):"IssueCommentEvent"===e.type&&(o.attr("href",e.payload.comment.html_url).html('<span class="bolder">issue '+e.payload.issue.number+"</span>"),r.append('<span class="bolder">'+e.actor+"</span> commented on ").append(o).append(" on "+e.date+': "'+e.payload.comment.body+'"'),t.append(a).append(r),n.append(t))}),n.addClass("col-list"),t.addClass("col-1of3").append("<h3>"+e.length+" Todo-Related Events</h3>").append(n),p.$container.append(t)}function r(e){var t,n=$(document.createElement("div")),a=$(document.createElement("ul"));e.forEach(function(e){var n=$(document.createElement("li")),r=$(document.createElement("img")),o=$(document.createElement("p")),p=$(document.createElement("a"));r.attr("src",e.avatar),p.attr("target","_blank"),"CreateEvent"===e.type?(o.append(['<span class="bolder">'+e.actor+"</span>","created",e.payload.ref_type,'<span class="bolder">'+e.payload.ref+"</span>","on",e.date].join(" ")),n.append(r).append(o),a.append(n)):"PullRequestEvent"===e.type?(t=e.payload.pull_request.url.replace(/\/\/api./,"//").replace(/\/repos\//,"/").replace(/pulls/,"pull"),p.attr("href",t).html('<span class="bolder">pull request '+e.payload.pull_request.number+"</span>"),o.append('<span class="bolder">'+e.actor+"</span>").append(" "+e.payload.action+" ").append(p).append(" on "+e.date),n.append(r).append(o),a.append(n)):"PullRequestReviewEvent"===e.type?(p.attr("href",e.payload.pull_request.html_url).text(e.payload.pull_request.title),o.append([e.actor,e.payload.action,"review of "].join(" ")).append(p).append(" on"+e.date),n.append(r).append(o),a.append(n)):"PullRequestReviewCommentEvent"===e.type&&(p.attr("href",e.payload.comment.html_url).text(e.payload.comment.body),o.append(['<span class="bolder">'+e.actor+"</span>",e.payload.action,"pull request comment "].join(" ")).append(p).append(" on"+e.date),n.append(r).append(o),a.append(n))}),a.addClass("col-list"),n.addClass("col-1of3").append("<h3>"+e.length+" Merge-Related Events</h3>").append(a),p.$container.append(n)}function o(){e()}var p={};return{init:o,render:t}}(),RepoSelect=function(){function e(){p.$selectContainer=$("#repo-select"),p.$selector=$(document.createElement("span")),p.$listContainer=$(document.createElement("div")),p.$repoList=$(document.createElement("ul"))}function t(){p.$selector.on("click",a)}function n(){var e=["dev-dash","meerkat_momentum"];LS.getData("dev-dash")&&LS.getData("dev-dash").repos&&LS.getData("dev-dash").repos.forEach(function(t){e.push(t)}),0===e.length?p.$repoList.append("<li>Add some repos, yo!</li>"):e.forEach(function(e){var t=$(document.createElement("a"));t.attr("href","#").text(e),p.$repoList.append("<li>"+t+"</li>")}),p.$listContainer.append(p.$repoList)}function a(e){e.preventDefault(),p.$selectContainer.append(p.$listContainer),p.$listContainer.toggleClass("hidden"),console.log(e)}function r(){console.log(p.$selector),p.$listContainer.addClass("repo-list").addClass("hidden"),p.$selector.addClass("repo-select").html("dev-dash &#x25BC;"),p.$selectContainer.append("You are currently viewing ").append(p.$selector).append(" repository.")}function o(){e(),n(),t(),r()}var p={};return{init:o}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
