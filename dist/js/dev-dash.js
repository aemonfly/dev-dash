"use strict";var HitApi=function(e){function t(){d.$inputForm=e("#input-form")}function n(){d.$inputForm.submit(r)}function a(e){return{type:e.type,date:e.created_at,actor:e.actor.display_login,avatar:e.actor.avatar_url,payload:e.payload}}function r(t,n){var a="https://api.github.com/repos",r=a+"/"+t+"/"+n+"/events";e.getJSON(r).then(o)}function o(e){var t=["PushEvent","CommitCommentEvent"],n=["IssuesEvent","IssueCommentEvent","ProjectEvent","ProjectCardEvent","ProjectColumnEvent"],r=["CreateEvent","PullRequestEvent","PullRequestReviewEvent","PullRequestReviewCommentEvent"],o=e.filter(function(e){return t.indexOf(e.type)!==-1}).map(a),l=e.filter(function(e){return n.indexOf(e.type)!==-1}).map(a),d=e.filter(function(e){return r.indexOf(e.type)!==-1}).map(a);RenderTable.render(o,l,d),RenderChart.render(e.map(a))}function l(){t(),n()}var d={};return{init:l,getEvents:r}}(jQuery),Greet=function(e){function t(){m.$greeting=e(".greeting"),m.$overlay=e('<div id="overlay"></div>'),m.$modalPrompt=e(document.createElement("div")),m.$modalError=e(document.createElement("p")),m.$modalPrompt.attr("id","user-modal").addClass("user-modal").html(f),m.$modalError.addClass("user-modal-error").html("GitHub Username Not Found"),e("body").append(m.$modalPrompt)}function n(){e("#user-modal-form").submit(a)}function a(e){e.preventDefault(),s=e.currentTarget[0].value.trim(),u=e.currentTarget[1].value.trim(),r(u).then(function(t){t.login===u&&(LS.setData("dev-dash-user",{name:e.currentTarget[0].value,githubName:e.currentTarget[1].value}),d(),i())}).catch(function(e){m.$modalPrompt.append(m.$modalError)})}function r(t){return e.getJSON("https://api.github.com/users/"+t)}function o(){var e,t=new Date,n=t.getHours();return e=n<12?"morning":n>=12&&n<17?"afternoon":"evening","Good "+e+", "+s+"."}function l(){m.$overlay.show(),m.$modalPrompt.addClass("user-modal-show")}function d(){m.$overlay.hide(),m.$modalPrompt.removeClass("user-modal-show")}function p(){var e=LS.getData("dev-dash-user");e&&e.name?(s=e.name,u=e.githubName,i()):l()}function i(){m.$greeting.text(o()),RepoSelect.getRepos(u)}function c(){t(),m.$overlay.hide(),e("body").append(m.$overlay),n(),p()}var s,u,m={},f='<form id="user-modal-form" class="Grid Grid--gutters Grid--full" action="submit">\n                    <div class="Grid-cell InputAddOn">\n                      <span class="InputAddOn-item">Your Name:</span>\n                      <input id="user-modal-name" class="InputAddOn-field" type="text" required>\n                    </div>\n                    <div class="Grid-cell InputAddOn">\n                      <span class="InputAddOn-item">GitHub User Name:</span>\n                      <input id="user-modal-username"  class="InputAddOn-field" type="text" required>\n                    </div>\n                      <div class="Grid-cell InputAddOn">\n                      <button class="InputAddOn-item" id="user-modal-button">Go!</button>\n                    </div>\n                    </form>';return{init:c}}(jQuery),LS=function(){function e(e,t){r&&r.setItem(e,JSON.stringify(t))}function t(e){if(r)return JSON.parse(r.getItem(e))}function n(){if(r)return r.clear()}function a(e){if(r)return r.removeItem(e)}var r=function(){var e,t,n=(new Date).toString();try{return e=window.localStorage,e.setItem(n,n),t=e.getItem(n)===n,e.removeItem(n),t&&e}catch(e){console.log("Problemz!")}}();return{setData:e,getData:t,deleteData:a,clearData:n}}(),RenderTable=function(e){function t(){p.$tableContainer=e(".table-container")}function n(e){return new Date(e).toDateString().slice(0,15).replace(/ 0/g," ")}function a(e,t,n){p.$tableContainer.empty(),e.length>0&&r(e),t.length>0&&o(t),n.length>0&&l(n)}function r(t){var a=e(document.createElement("div")),r=e(document.createElement("div")),o=e(document.createElement("ul"));t.forEach(function(t){var a=e(document.createElement("li")),r=e(document.createElement("img")),l=e(document.createElement("p")),d=e(document.createElement("span")),p=e(document.createElement("a"));p.attr("target","_blank"),"PushEvent"===t.type?t.payload.commits.forEach(function(e){var o=e.url.replace(/\/\/api./,"//").replace(/\/repos\//,"/").replace(/commits/,"commit");r.attr("src",t.avatar).appendTo(a),p.attr("href",o).html('<span class="bolder">'+e.sha.slice(0,6)+"</span>"),d.text('"'+e.message+'"'),l.append('<span class="bolder">'+t.actor+"</span> committed ").append(p).append(" on "+n(t.date)+": ").append(d).appendTo(a)}):(r.attr("src",t.avatar).appendTo(a),p.attr("href",t.payload.comment.html_url).html('<span class="bolder">'+t.payload.comment.commit_id.slice(0,6)+"</span>"),d.text('"'+t.payload.comment.body+'"'),l.append('<span class="bolder">'+t.actor+"</span> commented on ").append(p).append(" on "+n(t.date)+": ").append(d).appendTo(a)),a.appendTo(o)}),o.addClass("col-list").appendTo(a),r.addClass("table-col").append("<h3>"+t.length+" Commit-Related Events</h3>").append(a).appendTo(p.$tableContainer)}function o(t){var a=e(document.createElement("div")),r=e(document.createElement("ul"));t.forEach(function(t){var a=e(document.createElement("li")),o=e(document.createElement("img")),l=e(document.createElement("p")),d=e(document.createElement("a"));o.attr("src",t.avatar).appendTo(a),d.attr("target","_blank"),"IssuesEvent"===t.type?(d.attr("href",t.payload.issue.html_url).html('<span class="bolder">issue '+t.payload.issue.number+"</span>"),l.append('<span class="bolder">'+t.actor+"</span> "+t.payload.action+" ").append(d).append(" on "+n(t.date)+': "'+t.payload.issue.title+'"')):"IssueCommentEvent"===t.type&&(d.attr("href",t.payload.comment.html_url).html('<span class="bolder">issue '+t.payload.issue.number+"</span>"),l.append('<span class="bolder">'+t.actor+"</span> commented on ").append(d).append(" on "+n(t.date)+': "'+t.payload.comment.body+'"')),a.append(l).appendTo(r)}),r.addClass("col-list"),a.addClass("table-col").append("<h3>"+t.length+" Todo-Related Events</h3>").append(r).appendTo(p.$tableContainer)}function l(t){var a,r=e(document.createElement("div")),o=e(document.createElement("ul"));t.forEach(function(t){var r=e(document.createElement("li")),l=e(document.createElement("img")),d=e(document.createElement("p")),p=e(document.createElement("a"));l.attr("src",t.avatar),p.attr("target","_blank"),"CreateEvent"===t.type?d.append(['<span class="bolder">'+t.actor+"</span>","created",t.payload.ref_type,'<span class="bolder">'+t.payload.ref+"</span>","on",n(t.date)].join(" ")):"PullRequestEvent"===t.type?(a=t.payload.pull_request.url.replace(/\/\/api./,"//").replace(/\/repos\//,"/").replace(/pulls/,"pull"),p.attr("href",a).html('<span class="bolder">pull request '+t.payload.pull_request.number+"</span>"),d.append('<span class="bolder">'+t.actor+"</span>").append(" "+t.payload.action+" ").append(p).append(" on "+n(t.date))):"PullRequestReviewEvent"===t.type?(p.attr("href",t.payload.pull_request.html_url).text(t.payload.pull_request.title),d.append([t.actor,t.payload.action,"review of "].join(" ")).append(p).append(" on"+n(t.date))):"PullRequestReviewCommentEvent"===t.type&&(p.attr("href",t.payload.comment.html_url).text(t.payload.comment.body),d.append(['<span class="bolder">'+t.actor+"</span>",t.payload.action,"pull request comment "].join(" ")).append(p).append(" on"+n(t.date))),r.append(l).append(d).appendTo(o)}),o.addClass("col-list"),r.addClass("table-col").append("<h3>"+t.length+" Merge-Related Events</h3>").append(o).appendTo(p.$tableContainer)}function d(){t()}var p={};return{init:d,render:a}}(jQuery),RenderChart=function(e){function t(){m.$container=e(".chart-container"),m.$svgElem=e(document.createElementNS(f,"svg"))}function n(e){return new Date(e).toDateString().slice(0,15).replace(/ 0/g," ")}function a(e){for(var t=e.map(function(e){return n(e.date)}),a=new Date(t[0]),r=new Date(t[t.length-1]),o=[],l=a;l<=r;)o.push(n(l)),l=l.addDays(1);return o}function r(e){var t,n;return t=e.reduce(function(e,t){return Math.max(e,t[1])},e[0][1]),n=Math.floor(t/4),4*(n+1)}function o(e){var t,r,o=[],l=[];return e.forEach(function(e){"PushEvent"===e.type?e.payload.commits.forEach(function(t){o.push({actor:e.actor,avatar:e.avatar,date:e.date,payload:t,type:"Commit"})}):o.push(e)}),t=o.sort(function(e,t){return new Date(e.date)-new Date(t.date)}),r=a(t),l=r.map(function(e){return[e.slice(3,10),t.filter(function(t){return n(t.date)===e}).length]})}function l(e){return 1===e.length}function d(e,t,n){return e.map(function(e,a){return[a*t+g,h-e[1]*n-E]})}function p(t){var n=e(document.createElementNS(f,"g")),a=t.length-1,o=r(t),l=(v-g-y)/a,p=(h-E-y)/o,i=d(t,l,p);return i.forEach(function(a,r){var o=e(document.createElementNS(f,"circle")),l=e(document.createElementNS(f,"title")),d=a[0],p=a[1],i=4;o.attr("cx",d).attr("cy",p).attr("r",i),l.text(t[r][0]+" ("+t[r][1]+" events)"),o.append(l),n.addClass("chart-circle").append(o)}),n}function i(t){var n,a,o=e(document.createElementNS(f,"g")),l=t.length-1,p=r(t),i=(v-g-y)/l,c=(h-E-y)/p,s=d(t,i,c);for(n=0;n<s.length-1;n+=1)a=e(document.createElementNS(f,"line")),a.attr("x1",s[n][0]).attr("y1",s[n][1]).attr("x2",s[n+1][0]).attr("y2",s[n+1][1]),o.addClass("chart-line").append(a);return o}function c(t,n){var a,o,l,d,p,i,c,s,u,m,$=e(document.createElementNS(f,"g")),b=r(t);if("y"===n){for($.addClass("labels y-labels"),l=b>12?b/4:b,u=(h-E-y)/l,m=0;m<l+1;m+=1)s=m*b/l,c=h-E-u*m,a=e(document.createElementNS(f,"line")),a.addClass("horiz-rule").attr("x1",g).attr("y1",c).attr("x2",v-y+5).attr("y2",c),o=e(document.createElementNS(f,"text")),o.attr("x",g-20).attr("y",c+4).html(s),$.append(a).append(o);return $}if("x"===n||!n||null===n){for($.addClass("labels x-labels"),l=t.length-1,i=(v-g-y)/l,m=0;m<t.length;m+=1)o=e(document.createElementNS(f,"text")),p=t[m][0],d=m*i,o.attr("x",d+g).attr("y",h-5).text(p),t.length>20?0!==m&&m%10!==0&&m!==t.length-1||o.appendTo($):o.appendTo($),console.log(p);return $}}function s(e){var t;if(m.$svgElem.empty(),m.$svgElem.addClass("chart--content").attr("id","svg").attr("xmlns",f).attr("height","100%").attr("viewBox","0 0 "+v+" "+h).attr("xml:space","preserve"),e.length>0){if(t=o(e),l(t))return;m.$svgElem.append(c(t,"y")).append(c(t,"x")),m.$svgElem.append(i(t)),m.$svgElem.append(p(t)),m.$container.append(m.$svgElem)}}function u(){t()}var m={},f="http://www.w3.org/2000/svg",v=1e3,h=400,g=80,E=40,y=40;return Date.prototype.addDays=function(e){var t=new Date(this.valueOf());return t.setDate(t.getDate()+e),t},{init:u,render:s}}(jQuery),RepoSelect=function(e){function t(){f.$selectContainer=e(".repo-select"),f.$p=e(document.createElement("p")),f.$listContainer=e(document.createElement("div")),f.$ul=e(document.createElement("ul")),f.$newRepoForm=e(document.createElement("form")),f.$newRepoUser=e(document.createElement("input")),f.$newRepoRepo=e(document.createElement("input")),f.$newRepoBtn=e(document.createElement("button"))}function n(){f.$selectContainer.on("click",".repo-select-highlight",a),f.$ul.on("click","div.li-descriptions",r),f.$ul.on("click","span.li-remove",o),f.$newRepoForm.on("submit",l)}function a(e){e.stopPropagation(),f.$listContainer.toggleClass("hidden")}function r(e){e.stopPropagation();var t=e.currentTarget.children[0].innerHTML.split(" / ");m=t[1],i(v),HitApi.getEvents(t[0],t[1]),f.$listContainer.addClass("hidden")}function o(t){t.stopPropagation();var n=(t.target.previousElementSibling.dataset.repo,e(t.target).parent()),a=n.attr("id");v.splice(a,1),n.remove(),LS.setData("dev-dash-repos",v)}function l(t){t.preventDefault(),t.stopPropagation();var n="https://api.github.com/repos",a=t.currentTarget[0].value,r=t.currentTarget[1].value;e.getJSON(n+"/"+a+"/"+r).then(function(e){return v.unshift(e),f.$newRepoUser[0].value="",f.$newRepoRepo[0].value="",v}).then(p).then(i).catch(function(e){console.warn("Error fetching repo.")})}function d(e){if(e&&e.length){e.forEach(function(e){v.push(e)});var t=v[0].full_name.split("/");return m=t[1],HitApi.getEvents(t[0],t[1]),e}}function p(e){return LS.setData("dev-dash-repos",v),e}function i(t){t&&t.length?(f.$ul.html(""),t.forEach(function(t,n){var a=e(document.createElement("li"));a.attr("id",n).html('<div class="li-descriptions" data-repo="'+t.name+'">\n                             <p>'+t.owner.login+" / "+t.name+"</p>\n                             <p>"+t.description+'</p>\n                           </div>\n                           <span class="li-remove">&#10060</span>'),f.$ul.append(a)}),c()):(console.log("no repos, holmes"),c(),f.$listContainer.removeClass("hidden"))}function c(){f.$newRepoBtn.html("+"),f.$newRepoUser.attr("required","true").attr("placeholder","author"),f.$newRepoRepo.attr("required","true").attr("placeholder","repo"),f.$newRepoForm.addClass("new-repo-form").append(f.$newRepoUser).append(f.$newRepoRepo).append(f.$newRepoBtn),f.$listContainer.addClass("repo-list").append(f.$ul).append(f.$newRepoForm),f.$p.html('You are currently viewing the <span class="repo-select-highlight">'+m+"&#x25BC;</span> repository."),f.$selectContainer.append(f.$p).append(f.$listContainer)}function s(t){h?(d(LS.getData("dev-dash-repos")),i(v)):e.getJSON("https://api.github.com/users/"+t+"/repos?sort=updated").then(function(e){return e.slice(0,3)}).then(d).then(p).then(i)}function u(){t(),n(),f.$listContainer.addClass("hidden")}var m,f={},v=[],h=function(){return!!LS.getData("dev-dash-repos")}();return{init:u,getRepos:s}}(jQuery),Backgrounds=function(e){function t(){d.$body=e("body")}function n(){return(new Date).toDateString().slice(4,15)}function a(){var e=LS.getData("dev-dash-bg"),t=Math.floor(Math.random()*p.length),a={imgName:p[t],date:n()};return e?e:a}function r(){var e,t,n=p.indexOf(c.imgName);new Date(i)>new Date(c.date)?(e=7===n?0:n+1,t=p[e],LS.setData("dev-dash-bg",{imgName:t,date:i}),o(t)):(o(c.imgName),LS.setData("dev-dash-bg",{imgName:c.imgName,date:i}))}function o(e){d.$body.css("background-image","url(dist/assets/"+e+".jpg)")}function l(){t(),r()}var d={},p=["001","002","003","004","005","006","007","008"],i=n(),c=a();return{init:l}}(jQuery);$(document).ready(function(){Backgrounds.init(),RepoSelect.init(),Greet.init(),HitApi.init(),RenderTable.init(),RenderChart.init()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdldC1ldmVudHMuanMiLCJncmVldC5qcyIsImxvY2FsX3N0b3JhZ2UuanMiLCJyZW5kZXItdGFibGUuanMiLCJyZW5kZXItY2hhcnQuanMiLCJyZXBvLXNlbGVjdC5qcyIsImJhY2tncm91bmRzLmpzIiwiYXBwLmpzIl0sIm5hbWVzIjpbIkhpdEFwaSIsIiQiLCJjYWNoZURvbSIsIkRPTSIsIiRpbnB1dEZvcm0iLCJiaW5kRXZlbnRzIiwic3VibWl0IiwiZ2V0RXZlbnRzIiwicHJlcGFyZUV2ZW50cyIsImUiLCJ0eXBlIiwiZGF0ZSIsImNyZWF0ZWRfYXQiLCJhY3RvciIsImRpc3BsYXlfbG9naW4iLCJhdmF0YXIiLCJhdmF0YXJfdXJsIiwicGF5bG9hZCIsImF1dGhvciIsInJlcG8iLCJ1cmwiLCJyZXBvRXZlbnRzIiwiZ2V0SlNPTiIsInRoZW4iLCJoYW5kbGVSZXNwb25zZSIsInJlc3BvbnNlIiwiY29tbWl0VHlwZXMiLCJ0b2RvVHlwZXMiLCJtZXJnZVR5cGVzIiwiY29tbWl0RXZlbnRzIiwiZmlsdGVyIiwiaW5kZXhPZiIsIm1hcCIsInRvZG9FdmVudHMiLCJtZXJnZUV2ZW50cyIsIlJlbmRlclRhYmxlIiwicmVuZGVyIiwiUmVuZGVyQ2hhcnQiLCJpbml0IiwialF1ZXJ5IiwiR3JlZXQiLCIkZ3JlZXRpbmciLCIkb3ZlcmxheSIsIiRtb2RhbFByb21wdCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsIiRtb2RhbEVycm9yIiwiYXR0ciIsImFkZENsYXNzIiwiaHRtbCIsIm1vZGFsRm9ybSIsImFwcGVuZCIsImhhbmRsZVN1Ym1pdCIsInByZXZlbnREZWZhdWx0IiwibmFtZSIsImN1cnJlbnRUYXJnZXQiLCJ2YWx1ZSIsInRyaW0iLCJnaXRodWJOYW1lIiwiY2hlY2tVc2VyIiwicmVzIiwibG9naW4iLCJMUyIsInNldERhdGEiLCJoaWRlTW9kYWwiLCJkaXNwbGF5TWVzc2FnZSIsImNhdGNoIiwiZXJyIiwidSIsIm1ha2VNZXNzYWdlIiwidGltZU9mRGF5IiwidGVoRGF0ZSIsIkRhdGUiLCJpbml0aWFsSG91ciIsImdldEhvdXJzIiwic2hvd01vZGFsIiwic2hvdyIsImhpZGUiLCJyZW1vdmVDbGFzcyIsImNoZWNrU3RvcmFnZSIsInN0b3JhZ2UiLCJnZXREYXRhIiwidGV4dCIsIlJlcG9TZWxlY3QiLCJnZXRSZXBvcyIsImxvYyIsInZhbCIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5IiwicGFyc2UiLCJnZXRJdGVtIiwiY2xlYXJEYXRhIiwiY2xlYXIiLCJkZWxldGVEYXRhIiwicmVtb3ZlSXRlbSIsInJlc3VsdCIsInVpZCIsInRvU3RyaW5nIiwid2luZG93IiwibG9jYWxTdG9yYWdlIiwiZXhjZXB0aW9uIiwiY29uc29sZSIsImxvZyIsIiR0YWJsZUNvbnRhaW5lciIsImZvcm1hdERhdGUiLCJ0b0RhdGVTdHJpbmciLCJzbGljZSIsInJlcGxhY2UiLCJlbXB0eSIsImxlbmd0aCIsInJlbmRlckNvbW1pdEV2ZW50cyIsInJlbmRlclRvZG9FdmVudHMiLCJyZW5kZXJNZXJnZUV2ZW50cyIsImVzIiwiJGxpc3RDb250YWluZXIiLCIkY29sdW1uIiwiJGxpc3QiLCJmb3JFYWNoIiwiZXZ0IiwiJGxpc3RJdGVtIiwiJGltZyIsIiRwYXJhZ3JhcGgiLCIkcGFyYVNwYW4iLCIkYSIsImNvbW1pdHMiLCJjb21taXQiLCJjbGVhblVybCIsImFwcGVuZFRvIiwic2hhIiwibWVzc2FnZSIsImNvbW1lbnQiLCJodG1sX3VybCIsImNvbW1pdF9pZCIsImJvZHkiLCJpc3N1ZSIsIm51bWJlciIsImFjdGlvbiIsInRpdGxlIiwicmVmX3R5cGUiLCJyZWYiLCJqb2luIiwicHVsbF9yZXF1ZXN0IiwiJGNvbnRhaW5lciIsIiRzdmdFbGVtIiwiY3JlYXRlRWxlbWVudE5TIiwibnMiLCJmb3JtYXREYXRlcyIsImJ1aWxkRGF0ZVJhbmdlIiwiZXZlbnRzIiwibm9ybURhdGVzIiwic3RhcnREYXRlIiwic3RvcERhdGUiLCJkYXRlQXJyYXkiLCJjdXJyZW50RGF0ZSIsInB1c2giLCJhZGREYXlzIiwiZ2V0Q2hhcnRZTWF4IiwicG9pbnRzIiwibWF4TnVtRXZ0cyIsInF1b3RpZW50IiwicmVkdWNlIiwiYSIsImIiLCJNYXRoIiwibWF4IiwiZmxvb3IiLCJwcmVwYXJlRGF0ZUV2ZW50cyIsInNvcnRlZEV2ZW50cyIsImNoYXJ0RGF0YSIsInNvcnQiLCJ4Iiwic2FtZURhbW5EYXkiLCJwb2ludHNBcnIiLCJnZW5Gb3JtYXR0ZWRQb2ludHMiLCJ4TXVsdGlwbGUiLCJ5TXVsdGlwbGUiLCJwb2ludCIsImluZCIsInhNYXJnaW4iLCJoZWlnaHQiLCJ5TWFyZ2luIiwiZ2VuZXJhdGVDaXJjbGVzIiwiZ3JvdXAiLCJudW1Qb2ludHMiLCJjaGFydFlNYXgiLCJ3aWR0aCIsInNwYWNlciIsImZvcm1hdHRlZFBvaW50cyIsImNpcmNsZSIsImN4IiwiY3kiLCJyIiwiZ2VuZXJhdGVMaW5lcyIsImkiLCJsaW5lIiwiZ2VuQXhpc0xhYmVscyIsImF4aXMiLCJudW1BeGlzVGlja3MiLCJ4UG9zIiwieFZhbHVlIiwieVBvcyIsInlWYWx1ZSIsInlTcGFjaW5nIiwicHJvdG90eXBlIiwiZGF5cyIsImRhdCIsInRoaXMiLCJ2YWx1ZU9mIiwic2V0RGF0ZSIsImdldERhdGUiLCIkc2VsZWN0Q29udGFpbmVyIiwiJHAiLCIkdWwiLCIkbmV3UmVwb0Zvcm0iLCIkbmV3UmVwb1VzZXIiLCIkbmV3UmVwb1JlcG8iLCIkbmV3UmVwb0J0biIsIm9uIiwic2hvd1JlcG9MaXN0Iiwic2VsZWN0UmVwbyIsImRlbGV0ZVJlcG8iLCJhZGRSZXBvIiwic3RvcFByb3BhZ2F0aW9uIiwidG9nZ2xlQ2xhc3MiLCJwaWNrZWQiLCJjaGlsZHJlbiIsImlubmVySFRNTCIsInNwbGl0Iiwic2VsZWN0ZWRSZXBvIiwicG9wdWxhdGVNZW51IiwicmVwb3MiLCJzZWxlY3RlZEVsZW1lbnQiLCJ0YXJnZXQiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwiZGF0YXNldCIsInBhcmVudCIsInNlbGVjdGVkRWxlbUlkIiwic3BsaWNlIiwicmVtb3ZlIiwiYXBpVXJsIiwibmV3QXV0aG9yIiwibmV3UmVwbyIsInVuc2hpZnQiLCJzYXZlUmVwb3MiLCJ3YXJuIiwicG9wdWxhdGVSZXBvcyIsImRhdGEiLCJyZXBvWmVybyIsImZ1bGxfbmFtZSIsIiRsaSIsIm93bmVyIiwiZGVzY3JpcHRpb24iLCJ1c2VyTmFtZSIsIkJhY2tncm91bmRzIiwiJGJvZHkiLCJtYWtlRGF0ZSIsImxvYWRTdGF0ZSIsInN0b3JlZFN0YXRlIiwiaW1nSW5keCIsInJhbmRvbSIsImJnQXJyIiwibmV3U3RhdGUiLCJpbWdOYW1lIiwicGlja0JhY2tncm91bmQiLCJuZXdJbWdJbmRleCIsIm5ld0ltZ05hbWUiLCJjdXJudEltZ0luZHgiLCJzdGF0ZSIsInRvZGF5IiwiaW1hZ2VOYW1lIiwiY3NzIiwicmVhZHkiXSwibWFwcGluZ3MiOiJZQUdBLElBQUFBLFFBQUEsU0FBQUMsR0FNQSxRQUFBQyxLQUNBQyxFQUFBQyxXQUFBSCxFQUFBLGVBS0EsUUFBQUksS0FDQUYsRUFBQUMsV0FBQUUsT0FBQUMsR0FLQSxRQUFBQyxHQUFBQyxHQUNBLE9BQ0FDLEtBQUFELEVBQUFDLEtBQ0FDLEtBQUFGLEVBQUFHLFdBQ0FDLE1BQUFKLEVBQUFJLE1BQUFDLGNBQ0FDLE9BQUFOLEVBQUFJLE1BQUFHLFdBQ0FDLFFBQUFSLEVBQUFRLFNBTUEsUUFBQVYsR0FBQVcsRUFBQUMsR0FFQSxHQUFBQyxHQUFBLCtCQUNBQyxFQUFBRCxFQUFBLElBQUFGLEVBQUEsSUFBQUMsRUFBQSxTQUVBbEIsR0FBQXFCLFFBQUFELEdBQUFFLEtBQUFDLEdBS0EsUUFBQUEsR0FBQUMsR0FHQSxHQUFBQyxJQUFBLFlBQ0Esc0JBR0FDLEdBQUEsY0FDQSxvQkFDQSxlQUNBLG1CQUNBLHNCQUdBQyxHQUFBLGNBQ0EsbUJBQ0EseUJBQ0EsaUNBSUFDLEVBQUFKLEVBQ0FLLE9BQUEsU0FBQXJCLEdBQUEsTUFBQWlCLEdBQUFLLFFBQUF0QixFQUFBQyxTQUFBLElBQ0FzQixJQUFBeEIsR0FHQXlCLEVB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QUFBLEdBQUF4TCxPQUNBa0MsZUFDQUMsTUFBQSxFQUFBLElBS0EsUUFBQXNKLEtBQ0EsR0FBQUMsR0FBQXBNLEdBQUFtQixRQUFBLGVBQ0FrTCxFQUFBL0YsS0FBQUUsTUFBQUYsS0FBQWdHLFNBQUFDLEVBQUF2SixRQUNBd0osR0FDQUMsUUFBQUYsRUFBQUYsR0FDQXhQLEtBQUFxUCxJQUtBLE9BQUFFLEdBQUFBLEVBQUFJLEVBUUEsUUFBQUUsS0FLQSxHQUNBQyxHQUNBQyxFQUZBQyxFQUFBTixFQUFBdE8sUUFBQTZPLEVBQUFMLFFBSUEsSUFBQS9MLE1BQUFxTSxHQUFBLEdBQUFyTSxNQUFBb00sRUFBQWpRLE9BR0E4UCxFQUFBLElBQUFFLEVBQUEsRUFBQUEsRUFBQSxFQUdBRCxFQUFBTCxFQUFBSSxHQUdBM00sR0FBQUMsUUFBQSxlQUNBd00sUUFBQUcsRUFDQS9QLEtBQUFrUSxJQUlBek8sRUFBQXNPLEtBR0F0TyxFQUFBd08sRUFBQUwsU0FFQXpNLEdBQUFDLFFBQUEsZUFDQXdNLFFBQUFLLEVBQUFMLFFBQ0E1UCxLQUFBa1EsS0FRQSxRQUFBek8sR0FBQTBPLEdBQ0EzUSxFQUFBNFAsTUFDQWdCLElBQUEsbUJBQUEsbUJBQUFELEVBQUEsU0FLQSxRQUFBeE8sS0FDQXBDLElBQ0FzUSxJQXZGQSxHQUFBclEsTUFDQWtRLEdBQUEsTUFBQSxNQUFBLE1BQUEsTUFBQSxNQUFBLE1BQUEsTUFBQSxPQUNBUSxFQUFBYixJQUNBWSxFQUFBWCxHQXlGQSxRQUNBM04sS0FBQUEsSUFHQUMsT0NsR0F0QyxHQUFBMkMsVUFBQW9PLE1BQUEsV0FFQWxCLFlBQUF4TixPQUVBNkMsV0FBQTdDLE9BRUFFLE1BQUFGLE9BRUF0QyxPQUFBc0MsT0FFQUgsWUFBQUcsT0FFQUQsWUFBQUMiLCJmaWxlIjoiZGV2LWRhc2guanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBqc2hpbnQgZXN2ZXJzaW9uOjYgKi9cbi8qIGdsb2JhbHMgalF1ZXJ5LCBkb2N1bWVudCwgY29uc29sZSwgUmVuZGVyVGFibGUsIFJlbmRlckNoYXJ0ICovXG5cbnZhciBIaXRBcGkgPSAoZnVuY3Rpb24gKCQpIHtcblxuICAgIHZhciBET00gPSB7fTtcbiAgICBcbiAgICBcbiAgICAvLyBjYWNoZSBET00gZWxlbWVudHNcbiAgICBmdW5jdGlvbiBjYWNoZURvbSgpIHtcbiAgICAgICAgRE9NLiRpbnB1dEZvcm0gPSAkKCcjaW5wdXQtZm9ybScpO1xuICAgIH1cbiAgICBcblxuICAgIC8vIGJpbmQgZXZlbnRzXG4gICAgZnVuY3Rpb24gYmluZEV2ZW50cygpIHtcbiAgICAgICAgRE9NLiRpbnB1dEZvcm0uc3VibWl0KGdldEV2ZW50cyk7XG4gICAgfVxuXG5cbiAgICAvLyBwcmVwYXJlIGV2ZW50cyBwcmlvciB0byBjYWxsaW5nIHJlbmRlcmVyc1xuICAgIGZ1bmN0aW9uIHByZXBhcmVFdmVudHMoZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZSAgICA6IGUudHlwZSxcbiAgICAgICAgICAgIGRhdGUgICAgOiBlLmNyZWF0ZWRfYXQsXG4gICAgICAgICAgICBhY3RvciAgIDogZS5hY3Rvci5kaXNwbGF5X2xvZ2luLFxuICAgICAgICAgICAgYXZhdGFyICA6IGUuYWN0b3IuYXZhdGFyX3VybCxcbiAgICAgICAgICAgIHBheWxvYWQgOiBlLnBheWxvYWRcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBcbiAgICAvLyBnZXQgZ2l0aHViIGV2ZW50c1xuICAgIGZ1bmN0aW9uIGdldEV2ZW50cyhhdXRob3IsIHJlcG8pIHtcbiAgICAgICAgXG4gICAgICAgIHZhciB1cmw9ICdodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zJyxcbiAgICAgICAgICAgIHJlcG9FdmVudHMgPSBgJHt1cmx9LyR7YXV0aG9yfS8ke3JlcG99L2V2ZW50c2A7XG5cbiAgICAgICAgJC5nZXRKU09OKHJlcG9FdmVudHMpLnRoZW4oaGFuZGxlUmVzcG9uc2UpO1xuICAgIH1cblxuXG4gICAgLy8gaGFuZGxlIEdIIEpTT04gcmVzcG9uc2UgZGF0YVxuICAgIGZ1bmN0aW9uIGhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKSB7XG4gICAgICAgIFxuICAgICAgICAvLyB3ZSdyZSBzcGxpdHRpbmcgZXZlbnRzIGludG8gMyBjYXRlZ29yaWVzLCBiYXNlZCBvbiBldmVudCB0eXBlXG4gICAgICAgIHZhciBjb21taXRUeXBlcyA9IFsnUHVzaEV2ZW50JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICdDb21taXRDb21tZW50RXZlbnQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRvZG9UeXBlcyA9IFsnSXNzdWVzRXZlbnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICdJc3N1ZUNvbW1lbnRFdmVudCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ1Byb2plY3RFdmVudCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ1Byb2plY3RDYXJkRXZlbnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICdQcm9qZWN0Q29sdW1uRXZlbnQnXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBtZXJnZVR5cGVzID0gWydDcmVhdGVFdmVudCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdQdWxsUmVxdWVzdEV2ZW50JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ1B1bGxSZXF1ZXN0UmV2aWV3RXZlbnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAnUHVsbFJlcXVlc3RSZXZpZXdDb21tZW50RXZlbnQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gY3JlYXRlIGFycmF5IG9mIGNvbW1pdC1yZWxhdGVkIGV2ZW50c1xuICAgICAgICAgICAgY29tbWl0RXZlbnRzID0gcmVzcG9uc2VcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChlKSA9PiBjb21taXRUeXBlcy5pbmRleE9mKGUudHlwZSkgIT09IC0xKVxuICAgICAgICAgICAgICAgIC5tYXAocHJlcGFyZUV2ZW50cyksXG5cbiAgICAgICAgICAgIC8vIGNyZWF0ZSBhcnJheSBvZiB0b2RvLXJlbGF0ZWQgZXZlbnRzXG4gICAgICAgICAgICB0b2RvRXZlbnRzID0gcmVzcG9uc2VcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChlKSA9PiB0b2RvVHlwZXMuaW5kZXhPZihlLnR5cGUpICE9PSAtMSlcbiAgICAgICAgICAgICAgICAubWFwKHByZXBhcmVFdmVudHMpLFxuXG4gICAgICAgICAgICAvLyBjcmVhdGUgYnVpbGQgYXJyYXkgb2YgbWVyZ2UtcmVsYXRlZCBldmVudHNcbiAgICAgICAgICAgIG1lcmdlRXZlbnRzID0gcmVzcG9uc2VcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChlKSA9PiBtZXJnZVR5cGVzLmluZGV4T2YoZS50eXBlKSAhPT0gLTEpXG4gICAgICAgICAgICAgICAgLm1hcChwcmVwYXJlRXZlbnRzKTtcbiAgICAgICAgXG4gICAgICAgIC8vIGNhbGwgcmVuZGVyZXJzXG4gICAgICAgIFJlbmRlclRhYmxlLnJlbmRlcihjb21taXRFdmVudHMsIHRvZG9FdmVudHMsIG1lcmdlRXZlbnRzKTtcbiAgICAgICAgUmVuZGVyQ2hhcnQucmVuZGVyKHJlc3BvbnNlLm1hcChwcmVwYXJlRXZlbnRzKSk7XG4gICAgfVxuICAgIFxuICAgIFxuICAgIC8vIHB1YmxpYyBpbml0IG1ldGhvZFxuICAgIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgIGNhY2hlRG9tKCk7XG4gICAgICAgIGJpbmRFdmVudHMoKTtcbiAgICB9XG4gICAgXG4gICAgXG4gICAgLy8gcmV0dXJuIHB1YmxpYyBtZXRob2RzXG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5pdDogaW5pdCxcbiAgICAgICAgZ2V0RXZlbnRzOiBnZXRFdmVudHNcbiAgICB9O1xuXG59KGpRdWVyeSkpO1xuIiwiLyoganNoaW50IGVzdmVyc2lvbjo2ICovXG4vKiBnbG9iYWxzIGpRdWVyeSwgZG9jdW1lbnQsIGNvbnNvbGUsIExTLCBSZXBvU2VsZWN0ICovXG5cbnZhciBHcmVldCA9IChmdW5jdGlvbigkKSB7XG4gICAgXG4gICAgdmFyIG5hbWUsXG4gICAgICAgIGdpdGh1Yk5hbWUsXG4gICAgICAgIERPTSA9IHt9LFxuICAgICAgICBcbiAgICAgICAgLy8gbW9kYWwgcHJvbXB0IHRlbXBsYXRlXG4gICAgICAgIG1vZGFsRm9ybSA9IGA8Zm9ybSBpZD1cInVzZXItbW9kYWwtZm9ybVwiIGNsYXNzPVwiR3JpZCBHcmlkLS1ndXR0ZXJzIEdyaWQtLWZ1bGxcIiBhY3Rpb249XCJzdWJtaXRcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIkdyaWQtY2VsbCBJbnB1dEFkZE9uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJJbnB1dEFkZE9uLWl0ZW1cIj5Zb3VyIE5hbWU6PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD1cInVzZXItbW9kYWwtbmFtZVwiIGNsYXNzPVwiSW5wdXRBZGRPbi1maWVsZFwiIHR5cGU9XCJ0ZXh0XCIgcmVxdWlyZWQ+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiR3JpZC1jZWxsIElucHV0QWRkT25cIj5cbiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIklucHV0QWRkT24taXRlbVwiPkdpdEh1YiBVc2VyIE5hbWU6PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD1cInVzZXItbW9kYWwtdXNlcm5hbWVcIiAgY2xhc3M9XCJJbnB1dEFkZE9uLWZpZWxkXCIgdHlwZT1cInRleHRcIiByZXF1aXJlZD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIkdyaWQtY2VsbCBJbnB1dEFkZE9uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cIklucHV0QWRkT24taXRlbVwiIGlkPVwidXNlci1tb2RhbC1idXR0b25cIj5HbyE8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZm9ybT5gO1xuICAgIFxuICAgIFxuICAgIC8vIGNhY2hlIERPTSBlbGVtZW50c1xuICAgIGZ1bmN0aW9uIGNhY2hlRG9tKCkge1xuICAgICAgICBET00uJGdyZWV0aW5nICAgID0gJCgnLmdyZWV0aW5nJyk7XG4gICAgICAgIERPTS4kb3ZlcmxheSAgICAgPSAkKCc8ZGl2IGlkPVwib3ZlcmxheVwiPjwvZGl2PicpO1xuICAgICAgICBET00uJG1vZGFsUHJvbXB0ID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSk7XG4gICAgICAgIERPTS4kbW9kYWxFcnJvciAgPSAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKSk7XG5cbiAgICAgICAgRE9NLiRtb2RhbFByb21wdFxuICAgICAgICAgICAgLmF0dHIoJ2lkJywgJ3VzZXItbW9kYWwnKVxuICAgICAgICAgICAgLmFkZENsYXNzKCd1c2VyLW1vZGFsJylcbiAgICAgICAgICAgIC5odG1sKG1vZGFsRm9ybSk7XG4gICAgICAgIFxuICAgICAgICBET00uJG1vZGFsRXJyb3JcbiAgICAgICAgICAgIC5hZGRDbGFzcygndXNlci1tb2RhbC1lcnJvcicpXG4gICAgICAgICAgICAuaHRtbCgnR2l0SHViIFVzZXJuYW1lIE5vdCBGb3VuZCcpO1xuICAgICAgICBcbiAgICAgICAgJCgnYm9keScpXG4gICAgICAgICAgICAuYXBwZW5kKERPTS4kbW9kYWxQcm9tcHQpO1xuICAgIH1cbiAgICBcbiAgICBcbiAgICAvLyBiaW5kIGV2ZW50c1xuICAgIGZ1bmN0aW9uIGJpbmRFdmVudHMoKSB7XG4gICAgICAgICQoJyN1c2VyLW1vZGFsLWZvcm0nKS5zdWJtaXQoaGFuZGxlU3VibWl0KTtcbiAgICB9XG4gICAgXG4gICAgXG4gICAgLy8gaGFuZGxlIG1vZGFsIHN1Ym1pdFxuICAgIGZ1bmN0aW9uIGhhbmRsZVN1Ym1pdChlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIHNldCBtb2R1bGUgc2NvcGUgbmFtZXMgdG8gaW5wdXQgbmFtZXNcbiAgICAgICAgbmFtZSA9IGUuY3VycmVudFRhcmdldFswXS52YWx1ZS50cmltKCk7XG4gICAgICAgIGdpdGh1Yk5hbWUgPSBlLmN1cnJlbnRUYXJnZXRbMV0udmFsdWUudHJpbSgpO1xuICAgICAgICBcbiAgICAgICAgY2hlY2tVc2VyKGdpdGh1Yk5hbWUpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlcy5sb2dpbiA9PT0gZ2l0aHViTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gc2F2ZSB1c2VyIGRldGFpbHMgdG8gbG9jYWwgc3RvcmFnZVxuICAgICAgICAgICAgICAgICAgICBMUy5zZXREYXRhKCdkZXYtZGFzaC11c2VyJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSAgICAgOiBlLmN1cnJlbnRUYXJnZXRbMF0udmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBnaXRodWJOYW1lIDogZS5jdXJyZW50VGFyZ2V0WzFdLnZhbHVlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHJldHJhY3QgdGhlIG1vZGFsIHBhbmVsXG4gICAgICAgICAgICAgICAgICAgIGhpZGVNb2RhbCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGNhbGwgZGlzcGxheSBtZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXlNZXNzYWdlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyB3YXJuIHVzZXJcbiAgICAgICAgICAgICAgICBET00uJG1vZGFsUHJvbXB0XG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoRE9NLiRtb2RhbEVycm9yKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIFxuICAgIC8vIGNoZWNrIEdpdGh1YiB1c2VybmFtZVxuICAgIGZ1bmN0aW9uIGNoZWNrVXNlcih1KSB7XG4gICAgICAgIHJldHVybiAkLmdldEpTT04oJ2h0dHBzOi8vYXBpLmdpdGh1Yi5jb20vdXNlcnMvJyArIHUpO1xuICAgIH1cbiAgICBcbiAgICBcbiAgICAvLyBhc3NlbWJsZSB0aW1lLWJhc2VkIG1lc3NhZ2UgdG8gZ3JlZXQgdXNlclxuICAgIGZ1bmN0aW9uIG1ha2VNZXNzYWdlKCkge1xuICAgICAgICB2YXIgdGltZU9mRGF5LFxuICAgICAgICAgICAgdGVoRGF0ZSA9IG5ldyBEYXRlKCksXG4gICAgICAgICAgICBpbml0aWFsSG91ciA9IHRlaERhdGUuZ2V0SG91cnMoKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChpbml0aWFsSG91ciA8IDEyKSB7XG4gICAgICAgICAgICB0aW1lT2ZEYXkgPSBcIm1vcm5pbmdcIjtcbiAgICAgICAgfSBlbHNlIGlmIChpbml0aWFsSG91ciA+PSAxMiAmJiBpbml0aWFsSG91ciA8IDE3KSB7XG4gICAgICAgICAgICB0aW1lT2ZEYXkgPSBcImFmdGVybm9vblwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGltZU9mRGF5ID0gXCJldmVuaW5nXCI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYEdvb2QgJHt0aW1lT2ZEYXl9LCAke25hbWV9LmA7XG4gICAgfVxuICAgIFxuICAgIFxuICAgIC8vIHNob3cgbW9kYWwgcGFuZWwuIFNsaWRlcyBkb3duIGZyb20gdG9wXG4gICAgZnVuY3Rpb24gc2hvd01vZGFsKCkge1xuICAgICAgICBcbiAgICAgICAgLy8gc2hvdyBvdmVybGF5XG4gICAgICAgIERPTS4kb3ZlcmxheS5zaG93KCk7XG4gICAgICAgIFxuICAgICAgICAvLyBzaG93IG1vZGFsXG4gICAgICAgIERPTS4kbW9kYWxQcm9tcHRcbiAgICAgICAgICAgIC5hZGRDbGFzcygndXNlci1tb2RhbC1zaG93Jyk7XG4gICAgfVxuICAgIFxuICAgIFxuICAgIC8vIHJldHJhY3QgbW9kYWwgcGFuZWxcbiAgICBmdW5jdGlvbiBoaWRlTW9kYWwoKSB7XG4gICAgICAgIFxuICAgICAgICAvLyBzaG93IG92ZXJsYXlcbiAgICAgICAgRE9NLiRvdmVybGF5LmhpZGUoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIGhpZGUgbW9kYWxcbiAgICAgICAgRE9NLiRtb2RhbFByb21wdFxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCd1c2VyLW1vZGFsLXNob3cnKTtcbiAgICB9XG4gICAgXG4gICAgXG4gICAgLy8gY2hlY2sgbG9jYWwgc3RvcmFnZSBmb3IgdXNlclxuICAgIGZ1bmN0aW9uIGNoZWNrU3RvcmFnZSgpIHtcbiAgICAgICAgXG4gICAgICAgIHZhciBzdG9yYWdlID0gTFMuZ2V0RGF0YSgnZGV2LWRhc2gtdXNlcicpO1xuICAgICAgICBcbiAgICAgICAgLy8gaWYgdXNlciBmb3VuZCBpbiBsb2NhbCBzdG9yYWdlLCBnbyBzdHJhaWdodCB0byBncmVldGluZy5cbiAgICAgICAgLy8gb3RoZXJ3aXNlLCBzaG93IG1vZGFsICYgcHJvbXB0IHVzZXIgZm9yIGRldGFpbHNcbiAgICAgICAgaWYgKHN0b3JhZ2UgJiYgc3RvcmFnZS5uYW1lKSB7XG4gICAgICAgICAgICBuYW1lID0gc3RvcmFnZS5uYW1lO1xuICAgICAgICAgICAgZ2l0aHViTmFtZSA9IHN0b3JhZ2UuZ2l0aHViTmFtZTtcbiAgICAgICAgICAgIGRpc3BsYXlNZXNzYWdlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzaG93TW9kYWwoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcblxuICAgIC8vIHJlbmRlciBET00gYW5kIGNhbGwgUmVwb1NlbGVjdC5nZXRSZXBvcygpXG4gICAgZnVuY3Rpb24gZGlzcGxheU1lc3NhZ2UoKSB7XG4gICAgICAgIERPTS4kZ3JlZXRpbmcudGV4dChtYWtlTWVzc2FnZSgpKTtcbiAgICAgICAgUmVwb1NlbGVjdC5nZXRSZXBvcyhnaXRodWJOYW1lKTtcbiAgICB9XG4gICAgXG4gICAgXG4gICAgLy8gcHVibGljIGluaXQgbWV0aG9kXG4gICAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgY2FjaGVEb20oKTtcbiAgICAgICAgXG4gICAgICAgIERPTS4kb3ZlcmxheS5oaWRlKCk7XG4gICAgICAgICQoJ2JvZHknKS5hcHBlbmQoRE9NLiRvdmVybGF5KTsgLy8gdGhlbiBhcHBlbmQgaXQgdG8gRE9NXG4gICAgICAgIFxuICAgICAgICBiaW5kRXZlbnRzKCk7XG4gICAgICAgIFxuICAgICAgICBjaGVja1N0b3JhZ2UoKTtcbiAgICB9XG4gICAgXG4gICAgXG4gICAgLy8gZXhwb3J0IHB1YmxpYyBtZXRob2RzXG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5pdDogaW5pdFxuICAgIH07XG4gICAgXG59KGpRdWVyeSkpO1xuIiwiLyoganNoaW50IGVzdmVyc2lvbjo2ICovXG4vKiBnbG9iYWxzIHdpbmRvdyAqL1xuXG52YXIgTFMgPSAoZnVuY3Rpb24oKSB7XG5cbiAgIC8qKiBcbiAgICAqIGxvY2FsU3RvcmFnZSBmZWF0dXJlIGRldGVjdCAmIHJldHVybiBsb2NhbCByZWZlcmVuY2VcbiAgICAqIEBwYXJhbSAgICAgICBbbm9uZV1cbiAgICAqIEByZXR1cm5zICAgICBbQk9PTEVBTl0gICBbcmV0dXJucyB0cnVlIGlmIHN0b3JlZCBzdHJpbmcgPT09IHVpZF1cbiAgICAqL1xuICAgdmFyIHN0b3JhZ2UgPSAoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdWlkID0gbmV3IERhdGUoKS50b1N0cmluZygpLCAvLyBkYXRlIG11c3QgYmUgYSBzdHJpbmdcbiAgICAgICAgIHN0b3JhZ2UsXG4gICAgICAgICByZXN1bHQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgICBzdG9yYWdlID0gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgICAgICAgIHN0b3JhZ2Uuc2V0SXRlbSh1aWQsIHVpZCk7XG4gICAgICAgICByZXN1bHQgPSBzdG9yYWdlLmdldEl0ZW0odWlkKSA9PT0gdWlkO1xuICAgICAgICAgc3RvcmFnZS5yZW1vdmVJdGVtKHVpZCk7XG4gICAgICAgICByZXR1cm4gcmVzdWx0ICYmIHN0b3JhZ2U7XG4gICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnUHJvYmxlbXohJyk7XG4gICAgICB9XG4gICB9KCkpO1xuXG4gICAvKiogXG4gICAgKiBTdG9yZSBpdGVtIGluIGxvY2FsIHN0b3JhZ2UgaWYgc3RvcmFnZSBleGlzdHNcbiAgICAqIEBwYXJhbSAgICAgICBbc3RyaW5nXSAgICBsb2MgICAgICAgICBbbG9jYWwgc3RvcmFnZSBzdWItbG9jYXRpb25dXG4gICAgKiBAcGFyYW0gICAgICAgW3N0cmluZ10gICAgdmFsICAgICAgICAgW3N0cmluZyB0byBiZSBzdG9yZWRdXG4gICAgKiBAcGFyYW0gICAgICAgW2Z1bmN0aW9uXSAgc3RvcmFnZSAgICAgW2xvY2FsU3RvcmFnZSBmZWF0dXJlIGRldGVjdCAmIGxvY2FsIHJlZl1cbiAgICAqL1xuICAgZnVuY3Rpb24gc2V0RGF0YShsb2MsIHZhbCkge1xuICAgICAgaWYgKHN0b3JhZ2UpIHtcbiAgICAgICAgIHN0b3JhZ2Uuc2V0SXRlbShsb2MsIEpTT04uc3RyaW5naWZ5KHZhbCkpO1xuICAgICAgfVxuICAgfVxuXG4gICAvKiogXG4gICAgKiBHZXQgbG9jYWwgc3RvcmFnZSBpZiBzdG9yYWdlIGV4aXN0c1xuICAgICogQHBhcmFtICAgICAgIFtzdHJpbmddICAgIGxvYyAgICAgICAgIFtsb2NhbCBzdG9yYWdlIHN1Yi1sb2NhdGlvbl1cbiAgICAqIEBwYXJhbSAgICAgICBbZnVuY3Rpb25dICBzdG9yYWdlICAgICBbbG9jYWxTdG9yYWdlIGZlYXR1cmUgZGV0ZWN0ICYgbG9jYWwgcmVmXVxuICAgICogQHJldHVybnMgICAgIFtKU09OIHN0cmluZ10gICAgICAgICAgIFtmZXRjaCBzdG9yZWQgc3RyaW5nLCByZXR1cm4gSlNPTl1cbiAgICAqL1xuICAgZnVuY3Rpb24gZ2V0RGF0YShsb2MpIHtcbiAgICAgIGlmIChzdG9yYWdlKSB7XG4gICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShzdG9yYWdlLmdldEl0ZW0obG9jKSk7XG4gICAgICB9XG4gICB9XG5cbiAgIC8qKiBcbiAgICAqIERlbGV0ZSBBTEwga2V5cyBmcm9tIGxvY2FsIHN0b3JhZ2UgaWYgcGFzc1xuICAgICogQHBhcmFtICAgICAgIFtmdW5jdGlvbl0gIHN0b3JhZ2UgICAgIFtsb2NhbFN0b3JhZ2UgZmVhdHVyZSBkZXRlY3QgJiBsb2NhbCByZWZdXG4gICAgKiBAcmV0dXJucyAgICAgW2Z1bmN0aW9uXSAgLmNsZWFyICAgICAgW3dpcGVzIGxvY2FsIHN0b3JhZ2VdXG4gICAgKi9cbiAgIGZ1bmN0aW9uIGNsZWFyRGF0YSgpIHtcbiAgICAgIGlmIChzdG9yYWdlKSB7XG4gICAgICAgICByZXR1cm4gc3RvcmFnZS5jbGVhcigpO1xuICAgICAgfVxuICAgfVxuXG4gICAvKiogXG4gICAgKiBEZWxldGUgT05FIGtleSBmcm9tIGxvY2FsIHN0b3JhZ2UgaWYgcGFzc1xuICAgICogQHBhcmFtICAgICAgIFtzdHJpbmddICAgIGxvYyAgICAgICAgIFt0aGUga2V5IHRvIGRlbGV0ZSBmcm9tIGxvY2FsU3RvcmFnZV1cbiAgICAqIEBwYXJhbSAgICAgICBbZnVuY3Rpb25dICBzdG9yYWdlICAgICBbbG9jYWxTdG9yYWdlIGZlYXR1cmUgZGV0ZWN0ICYgbG9jYWwgcmVmXVxuICAgICogQHJldHVybnMgICAgIFtmdW5jdGlvbl0gIC5jbGVhciAgICAgIFt3aXBlcyBsb2NhbCBzdG9yYWdlXVxuICAgICovXG4gICBmdW5jdGlvbiBkZWxldGVEYXRhKGxvYykge1xuICAgICAgaWYgKHN0b3JhZ2UpIHtcbiAgICAgICAgIHJldHVybiBzdG9yYWdlLnJlbW92ZUl0ZW0obG9jKTtcbiAgICAgIH1cbiAgIH1cblxuICAgcmV0dXJuIHtcbiAgICAgIHNldERhdGE6IHNldERhdGEsXG4gICAgICBnZXREYXRhOiBnZXREYXRhLFxuICAgICAgZGVsZXRlRGF0YTogZGVsZXRlRGF0YSxcbiAgICAgIGNsZWFyRGF0YTogY2xlYXJEYXRhXG4gICB9O1xuXG59KCkpO1xuIiwiLyoganNoaW50IGVzdmVyc2lvbjo2ICovXG4vKiBnbG9iYWxzIGpRdWVyeSwgZG9jdW1lbnQgKi9cblxudmFyIFJlbmRlclRhYmxlID0gKGZ1bmN0aW9uICgkKSB7XG5cbiAgICB2YXIgRE9NID0ge307XG4gICAgXG4gICAgXG4gICAgLy8gY2FjaGUgRE9NIGVsZW1lbnRzXG4gICAgZnVuY3Rpb24gY2FjaGVEb20oKSB7XG4gICAgICAgIERPTS4kdGFibGVDb250YWluZXIgPSAkKCcudGFibGUtY29udGFpbmVyJyk7XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICAvLyBmb3JtYXQgZGF0ZXNcbiAgICBmdW5jdGlvbiBmb3JtYXREYXRlKGRhdGUpIHtcblxuICAgICAgICByZXR1cm4gbmV3IERhdGUoZGF0ZSkgICAgIC8vIG1ha2UgZGF0ZSBvYmplY3QgZm9yIGRheSAmIG1vbnRoIGFiYnJldlxuICAgICAgICAgICAgLnRvRGF0ZVN0cmluZygpICAgICAgIC8vIGNvbnZlcnQgb2JqZWN0IHRvIGEgc3RyaW5nXG4gICAgICAgICAgICAuc2xpY2UoMCwgMTUpICAgICAgICAgLy8gcmVtb3ZlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIFlZWVlcbiAgICAgICAgICAgIC5yZXBsYWNlKC8gMC9nLCAnICcpOyAvLyByZW1vdmUgbGVhZGluZyB6ZXJvcyAoZXguICcwNCcgPT4gJzQnKVxuICAgIH1cblxuXG4gICAgLy8gcHVibGljIHJlbmRlciBtZXRob2QgY2FsbHMgY2F0ZWdvcnkgcmVuZGVyZXJzIGlmIGNhdGVnb3J5IGhhcyBldmVudHNcbiAgICBmdW5jdGlvbiByZW5kZXIoY29tbWl0RXZlbnRzLCB0b2RvRXZlbnRzLCBtZXJnZUV2ZW50cykge1xuXG4gICAgICAgIC8vIGNsZWFyIHByZXZpb3VzIHJlc3VsdHNcbiAgICAgICAgRE9NLiR0YWJsZUNvbnRhaW5lclxuICAgICAgICAgICAgLmVtcHR5KCk7XG4gICAgICAgIFxuICAgICAgICBpZiAoY29tbWl0RXZlbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJlbmRlckNvbW1pdEV2ZW50cyhjb21taXRFdmVudHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRvZG9FdmVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmVuZGVyVG9kb0V2ZW50cyh0b2RvRXZlbnRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtZXJnZUV2ZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZW5kZXJNZXJnZUV2ZW50cyhtZXJnZUV2ZW50cyk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8vIHJlbmRlciBjb21taXQgZXZlbnRzXG4gICAgZnVuY3Rpb24gcmVuZGVyQ29tbWl0RXZlbnRzKGVzKSB7XG5cbiAgICAgICAgLy8gcmVjZWl2ZXMgUHVzaEV2ZW50ICYgQ29tbWl0Q29tbWVudEV2ZW50IGV2ZW50IHR5cGVzXG5cbiAgICAgICAgdmFyICRsaXN0Q29udGFpbmVyID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSksXG4gICAgICAgICAgICAkY29sdW1uICAgICAgID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSksXG4gICAgICAgICAgICAkbGlzdCAgICAgICAgID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpKTtcblxuICAgICAgICBlcy5mb3JFYWNoKGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coZXZ0KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyICRsaXN0SXRlbSAgPSAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJykpLFxuICAgICAgICAgICAgICAgICRpbWcgICAgICAgPSAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpKSxcbiAgICAgICAgICAgICAgICAkcGFyYWdyYXBoID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJykpLFxuICAgICAgICAgICAgICAgICRwYXJhU3BhbiAgPSAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKSksXG4gICAgICAgICAgICAgICAgJGEgICAgICAgICA9ICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgJGFcbiAgICAgICAgICAgICAgICAuYXR0cigndGFyZ2V0JywgJ19ibGFuaycpO1xuXG4gICAgICAgICAgICBpZiAoZXZ0LnR5cGUgPT09ICdQdXNoRXZlbnQnKSB7XG5cbiAgICAgICAgICAgICAgICAvLyB3aGVuIGl0J3MgYSBwdXNoIGV2ZW50LCBleHRyYWN0IHRoZSBjb21taXRzXG4gICAgICAgICAgICAgICAgZXZ0LnBheWxvYWQuY29tbWl0cy5mb3JFYWNoKGZ1bmN0aW9uIChjb21taXQpIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBjb252ZXJ0IGNvbW1pdCBVUkwgaW50byByZWd1bGFyIGdpdGh1Yi5jb20gVVJMXG4gICAgICAgICAgICAgICAgICAgIC8vIGZyb206IGh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3Mve3VzZXJ9L3tyZXBvfS9jb21taXRzL3tzaGF9XG4gICAgICAgICAgICAgICAgICAgIC8vICAgdG86IGh0dHBzOi8vZ2l0aHViLmNvbS97dXNlcn0ve3JlcG99L2NvbW1pdC97c2hhfVxuICAgICAgICAgICAgICAgICAgICB2YXIgY2xlYW5VcmwgPSAoY29tbWl0LnVybClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXC9cXC9hcGkuLywgJ1xcL1xcLycpICAgIC8vIHJlbW92ZSAnYXBpLidcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXC9yZXBvc1xcLy8sICdcXC8nKSAgICAgLy8gcmVtb3ZlICdyZXBvcy8nXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvY29tbWl0cy8sICdjb21taXQnKTsgIC8vIHNpbmd1bGFyICdjb21taXQnXG5cbiAgICAgICAgICAgICAgICAgICAgJGltZ1xuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NyYycsIGV2dC5hdmF0YXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kVG8oJGxpc3RJdGVtKTtcblxuICAgICAgICAgICAgICAgICAgICAkYVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2hyZWYnLCBjbGVhblVybClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5odG1sKGA8c3BhbiBjbGFzcz1cImJvbGRlclwiPiR7KGNvbW1pdC5zaGEpLnNsaWNlKDAsNil9PC9zcGFuPmApO1xuXG4gICAgICAgICAgICAgICAgICAgICRwYXJhU3BhblxuICAgICAgICAgICAgICAgICAgICAgICAgLnRleHQoYFwiJHtjb21taXQubWVzc2FnZX1cImApO1xuXG4gICAgICAgICAgICAgICAgICAgICRwYXJhZ3JhcGhcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoYDxzcGFuIGNsYXNzPVwiYm9sZGVyXCI+JHtldnQuYWN0b3J9PC9zcGFuPiBjb21taXR0ZWQgYClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKGAgb24gJHtmb3JtYXREYXRlKGV2dC5kYXRlKX06IGApXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCRwYXJhU3BhbilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmRUbygkbGlzdEl0ZW0pO1xuXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIGVsc2UgaXQncyBhIGNvbW1lbnRcblxuICAgICAgICAgICAgICAgICRpbWdcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NyYycsIGV2dC5hdmF0YXIpXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmRUbygkbGlzdEl0ZW0pO1xuXG4gICAgICAgICAgICAgICAgJGFcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2hyZWYnLCBldnQucGF5bG9hZC5jb21tZW50Lmh0bWxfdXJsKVxuICAgICAgICAgICAgICAgICAgICAuaHRtbChgPHNwYW4gY2xhc3M9XCJib2xkZXJcIj4keyhldnQucGF5bG9hZC5jb21tZW50LmNvbW1pdF9pZCkuc2xpY2UoMCw2KX08L3NwYW4+YCk7XG5cbiAgICAgICAgICAgICAgICAkcGFyYVNwYW5cbiAgICAgICAgICAgICAgICAgICAgLnRleHQoYFwiJHtldnQucGF5bG9hZC5jb21tZW50LmJvZHl9XCJgKTtcblxuICAgICAgICAgICAgICAgICRwYXJhZ3JhcGhcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChgPHNwYW4gY2xhc3M9XCJib2xkZXJcIj4ke2V2dC5hY3Rvcn08L3NwYW4+IGNvbW1lbnRlZCBvbiBgKVxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCRhKVxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKGAgb24gJHtmb3JtYXREYXRlKGV2dC5kYXRlKX06IGApXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJHBhcmFTcGFuKVxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kVG8oJGxpc3RJdGVtKTtcblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAkbGlzdEl0ZW1cbiAgICAgICAgICAgICAgICAuYXBwZW5kVG8oJGxpc3QpO1xuXG4gICAgICAgIH0pO1xuXG4gICAgICAgICRsaXN0XG4gICAgICAgICAgICAuYWRkQ2xhc3MoJ2NvbC1saXN0JylcbiAgICAgICAgICAgIC5hcHBlbmRUbygkbGlzdENvbnRhaW5lcik7XG4gICAgICAgIFxuICAgICAgICAkY29sdW1uXG4gICAgICAgICAgICAuYWRkQ2xhc3MoJ3RhYmxlLWNvbCcpXG4gICAgICAgICAgICAuYXBwZW5kKGA8aDM+JHtlcy5sZW5ndGh9IENvbW1pdC1SZWxhdGVkIEV2ZW50czwvaDM+YClcbiAgICAgICAgICAgIC5hcHBlbmQoJGxpc3RDb250YWluZXIpXG4gICAgICAgICAgICAuYXBwZW5kVG8oRE9NLiR0YWJsZUNvbnRhaW5lcik7XG4gICAgICAgIFxuICAgIH1cblxuXG4gICAgLy8gcmVuZGVyIHRvZG8gZXZlbnRzXG4gICAgZnVuY3Rpb24gcmVuZGVyVG9kb0V2ZW50cyhlcykge1xuXG4gICAgICAgIC8vIGdldHMgSXNzdWVzRXZlbnRzLCBJc3N1ZUNvbW1lbnRFdmVudHMsIFByb2plY3RFdmVudHMsXG4gICAgICAgIC8vICAgUHJvamVjdENhcmRFdmVudHMsIGFuZCBQcm9qZWN0Q29sdW1uRXZlbnRzXG5cbiAgICAgICAgdmFyICRjb2x1bW4gPSAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKSxcbiAgICAgICAgICAgICRsaXN0ICAgPSAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJykpO1xuXG4gICAgICAgIGVzLmZvckVhY2goZnVuY3Rpb24gKGV2dCkge1xuXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhldnQpO1xuXG4gICAgICAgICAgICB2YXIgJGxpc3RJdGVtICA9ICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKSksXG4gICAgICAgICAgICAgICAgJGltZyAgICAgICA9ICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJykpLFxuICAgICAgICAgICAgICAgICRwYXJhZ3JhcGggPSAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKSksXG4gICAgICAgICAgICAgICAgJGEgICAgICAgICA9ICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpKTtcblxuICAgICAgICAgICAgJGltZ1xuICAgICAgICAgICAgICAgIC5hdHRyKCdzcmMnLCBldnQuYXZhdGFyKVxuICAgICAgICAgICAgICAgIC5hcHBlbmRUbygkbGlzdEl0ZW0pO1xuXG4gICAgICAgICAgICAkYS5hdHRyKCd0YXJnZXQnLCAnX2JsYW5rJyk7XG5cbiAgICAgICAgICAgIGlmIChldnQudHlwZSA9PT0gJ0lzc3Vlc0V2ZW50Jykge1xuXG4gICAgICAgICAgICAgICAgJGFcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2hyZWYnLCBldnQucGF5bG9hZC5pc3N1ZS5odG1sX3VybClcbiAgICAgICAgICAgICAgICAgICAgLmh0bWwoYDxzcGFuIGNsYXNzPVwiYm9sZGVyXCI+aXNzdWUgJHtldnQucGF5bG9hZC5pc3N1ZS5udW1iZXJ9PC9zcGFuPmApO1xuXG4gICAgICAgICAgICAgICAgJHBhcmFncmFwaFxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKGA8c3BhbiBjbGFzcz1cImJvbGRlclwiPiR7ZXZ0LmFjdG9yfTwvc3Bhbj4gJHtldnQucGF5bG9hZC5hY3Rpb259IGApXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJGEpXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoYCBvbiAke2Zvcm1hdERhdGUoZXZ0LmRhdGUpfTogXCIke2V2dC5wYXlsb2FkLmlzc3VlLnRpdGxlfVwiYCk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZ0LnR5cGUgPT09ICdJc3N1ZUNvbW1lbnRFdmVudCcpIHtcblxuICAgICAgICAgICAgICAgICRhXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdocmVmJywgZXZ0LnBheWxvYWQuY29tbWVudC5odG1sX3VybClcbiAgICAgICAgICAgICAgICAgICAgLmh0bWwoYDxzcGFuIGNsYXNzPVwiYm9sZGVyXCI+aXNzdWUgJHtldnQucGF5bG9hZC5pc3N1ZS5udW1iZXJ9PC9zcGFuPmApO1xuXG4gICAgICAgICAgICAgICAgJHBhcmFncmFwaFxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKGA8c3BhbiBjbGFzcz1cImJvbGRlclwiPiR7ZXZ0LmFjdG9yfTwvc3Bhbj4gY29tbWVudGVkIG9uIGApXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJGEpXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoYCBvbiAke2Zvcm1hdERhdGUoZXZ0LmRhdGUpfTogXCIke2V2dC5wYXlsb2FkLmNvbW1lbnQuYm9keX1cImApO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICRsaXN0SXRlbVxuICAgICAgICAgICAgICAgIC5hcHBlbmQoJHBhcmFncmFwaClcbiAgICAgICAgICAgICAgICAuYXBwZW5kVG8oJGxpc3QpO1xuICAgICAgICB9KTtcblxuICAgICAgICAkbGlzdFxuICAgICAgICAgICAgLmFkZENsYXNzKCdjb2wtbGlzdCcpO1xuXG4gICAgICAgICRjb2x1bW5cbiAgICAgICAgICAgIC5hZGRDbGFzcygndGFibGUtY29sJylcbiAgICAgICAgICAgIC5hcHBlbmQoYDxoMz4ke2VzLmxlbmd0aH0gVG9kby1SZWxhdGVkIEV2ZW50czwvaDM+YClcbiAgICAgICAgICAgIC5hcHBlbmQoJGxpc3QpXG4gICAgICAgICAgICAuYXBwZW5kVG8oRE9NLiR0YWJsZUNvbnRhaW5lcik7XG5cbiAgICB9XG5cblxuICAgIC8vIHJlbmRlciBtZXJnZSBldmVudHNcbiAgICBmdW5jdGlvbiByZW5kZXJNZXJnZUV2ZW50cyhlcykge1xuXG4gICAgICAgIC8vIHJlY2VpdmVzIENyZWF0ZUV2ZW50LCBQdWxsUmVxdWVzdEV2ZW50LCBQdWxsUmVxdWVzdFJldmlld0V2ZW50XG4gICAgICAgIC8vICAgYW5kIFB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudEV2ZW50IGV2ZW50IHR5cGVzXG5cbiAgICAgICAgdmFyICRjb2x1bW4gPSAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKSxcbiAgICAgICAgICAgICRsaXN0ICAgPSAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJykpLFxuICAgICAgICAgICAgY2xlYW5Vcmw7XG5cbiAgICAgICAgZXMuZm9yRWFjaChmdW5jdGlvbiAoZXZ0KSB7XG5cbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGV2dCk7XG5cbiAgICAgICAgICAgIHZhciAkbGlzdEl0ZW0gID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpKSxcbiAgICAgICAgICAgICAgICAkaW1nICAgICAgID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKSksXG4gICAgICAgICAgICAgICAgJHBhcmFncmFwaCA9ICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpKSxcbiAgICAgICAgICAgICAgICAkYSAgICAgICAgID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJykpO1xuXG4gICAgICAgICAgICAkaW1nLmF0dHIoJ3NyYycsIGV2dC5hdmF0YXIpO1xuXG4gICAgICAgICAgICAkYS5hdHRyKCd0YXJnZXQnLCAnX2JsYW5rJyk7XG5cbiAgICAgICAgICAgIGlmIChldnQudHlwZSA9PT0gJ0NyZWF0ZUV2ZW50Jykge1xuXG4gICAgICAgICAgICAgICAgJHBhcmFncmFwaFxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGA8c3BhbiBjbGFzcz1cImJvbGRlclwiPiR7ZXZ0LmFjdG9yfTwvc3Bhbj5gLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2NyZWF0ZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXZ0LnBheWxvYWQucmVmX3R5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBgPHNwYW4gY2xhc3M9XCJib2xkZXJcIj4ke2V2dC5wYXlsb2FkLnJlZn08L3NwYW4+YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICdvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXREYXRlKGV2dC5kYXRlKVxuICAgICAgICAgICAgICAgICAgICBdLmpvaW4oJyAnKSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZ0LnR5cGUgPT09ICdQdWxsUmVxdWVzdEV2ZW50Jykge1xuXG4gICAgICAgICAgICAgICAgLy8gZnJvbTogaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9yZXBvcy9iZWxjdXJ2L21lZXJrYXRfbW9tZW50dW0vcHVsbHMvMTFcbiAgICAgICAgICAgICAgICAvLyAgIHRvOiBodHRwczovL2dpdGh1Yi5jb20vYmVsY3Vydi9tZWVya2F0X21vbWVudHVtL3B1bGwvMTFcbiAgICAgICAgICAgICAgICBjbGVhblVybCA9IChldnQucGF5bG9hZC5wdWxsX3JlcXVlc3QudXJsKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFwvXFwvYXBpLi8sICdcXC9cXC8nKSAgLy8gcmVtb3ZlICdhcGkuJ1xuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFwvcmVwb3NcXC8vLCAnXFwvJykgICAvLyByZW1vdmUgJ3JlcG9zLydcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL3B1bGxzLywgJ3B1bGwnKTsgICAgLy8gc2luZ3VsYXIgJ3B1bGwnXG5cbiAgICAgICAgICAgICAgICAkYVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignaHJlZicsIGNsZWFuVXJsKVxuICAgICAgICAgICAgICAgICAgICAuaHRtbChgPHNwYW4gY2xhc3M9XCJib2xkZXJcIj5wdWxsIHJlcXVlc3QgJHtldnQucGF5bG9hZC5wdWxsX3JlcXVlc3QubnVtYmVyfTwvc3Bhbj5gKTtcblxuICAgICAgICAgICAgICAgICRwYXJhZ3JhcGhcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChgPHNwYW4gY2xhc3M9XCJib2xkZXJcIj4ke2V2dC5hY3Rvcn08L3NwYW4+YClcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChgICR7ZXZ0LnBheWxvYWQuYWN0aW9ufSBgKVxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCRhKVxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKGAgb24gJHtmb3JtYXREYXRlKGV2dC5kYXRlKX1gKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChldnQudHlwZSA9PT0gJ1B1bGxSZXF1ZXN0UmV2aWV3RXZlbnQnKSB7XG5cbiAgICAgICAgICAgICAgICAkYVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignaHJlZicsIGV2dC5wYXlsb2FkLnB1bGxfcmVxdWVzdC5odG1sX3VybClcbiAgICAgICAgICAgICAgICAgICAgLnRleHQoZXZ0LnBheWxvYWQucHVsbF9yZXF1ZXN0LnRpdGxlKTtcblxuICAgICAgICAgICAgICAgICRwYXJhZ3JhcGhcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChbXG4gICAgICAgICAgICAgICAgICAgICAgICBldnQuYWN0b3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBldnQucGF5bG9hZC5hY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAncmV2aWV3IG9mICdcbiAgICAgICAgICAgICAgICAgICAgXS5qb2luKCcgJykpXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJGEpXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJyBvbicgKyBmb3JtYXREYXRlKGV2dC5kYXRlKSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZ0LnR5cGUgPT09ICdQdWxsUmVxdWVzdFJldmlld0NvbW1lbnRFdmVudCcpIHtcblxuICAgICAgICAgICAgICAgICRhXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdocmVmJywgZXZ0LnBheWxvYWQuY29tbWVudC5odG1sX3VybClcbiAgICAgICAgICAgICAgICAgICAgLnRleHQoZXZ0LnBheWxvYWQuY29tbWVudC5ib2R5KTtcblxuICAgICAgICAgICAgICAgICRwYXJhZ3JhcGhcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChbXG4gICAgICAgICAgICAgICAgICAgICAgICBgPHNwYW4gY2xhc3M9XCJib2xkZXJcIj4ke2V2dC5hY3Rvcn08L3NwYW4+YCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2dC5wYXlsb2FkLmFjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICdwdWxsIHJlcXVlc3QgY29tbWVudCAnXG4gICAgICAgICAgICAgICAgICAgIF0uam9pbignICcpKVxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCRhKVxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCcgb24nICsgZm9ybWF0RGF0ZShldnQuZGF0ZSkpO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICRsaXN0SXRlbVxuICAgICAgICAgICAgICAgIC5hcHBlbmQoJGltZylcbiAgICAgICAgICAgICAgICAuYXBwZW5kKCRwYXJhZ3JhcGgpXG4gICAgICAgICAgICAgICAgLmFwcGVuZFRvKCRsaXN0KTtcblxuICAgICAgICB9KTtcblxuICAgICAgICAkbGlzdFxuICAgICAgICAgICAgLmFkZENsYXNzKCdjb2wtbGlzdCcpO1xuXG4gICAgICAgICRjb2x1bW5cbiAgICAgICAgICAgIC5hZGRDbGFzcygndGFibGUtY29sJylcbiAgICAgICAgICAgIC5hcHBlbmQoYDxoMz4ke2VzLmxlbmd0aH0gTWVyZ2UtUmVsYXRlZCBFdmVudHM8L2gzPmApXG4gICAgICAgICAgICAuYXBwZW5kKCRsaXN0KVxuICAgICAgICAgICAgLmFwcGVuZFRvKERPTS4kdGFibGVDb250YWluZXIpO1xuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgLy8gcHVibGljIGluaXQgbWV0aG9kXG4gICAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgY2FjaGVEb20oKTtcbiAgICB9XG5cblxuICAgIC8vIHJldHVybiBwdWJsaWMgbWV0aG9kc1xuICAgIHJldHVybiB7XG4gICAgICAgIGluaXQ6IGluaXQsXG4gICAgICAgIHJlbmRlcjogcmVuZGVyXG4gICAgfTtcblxufShqUXVlcnkpKTtcbiIsIi8qIE5vdGU6IHRoZSBjaGFydCBpcyBPTkxZIHJlbmRlcmVkIHdoZW4gZXZlbnRzIG9jY3VyIG9uIG1vcmUgdGhhbiAxIGRheVxuICogSWYgdGhleSBhbGwgb2NjdXIgb24gdGhlIHNhbWUgZGF5LCB0aGUgY2hhcnQgd291bGQganVzdCBiZSAxIHBvaW50ISAqL1xuXG4vKiBqc2hpbnQgZXN2ZXJzaW9uOjYgKi9cbi8qIGdsb2JhbHMgalF1ZXJ5LCBjb25zb2xlLCBkb2N1bWVudCAqL1xuXG52YXIgUmVuZGVyQ2hhcnQgPSAoZnVuY3Rpb24gKCQpIHtcblxuICAgIHZhciBcbiAgICAgICAgLy8gcGxhY2Vob2xkZXIgb2JqZWN0IGZvciBjYWNoZWQgRE9NIGVsZW1lbnRzXG4gICAgICAgIERPTSA9IHt9LFxuICAgICAgICBcbiAgICAgICAgLy8gWE1MIG5hbWVzcGFjZSBmb3IgU1ZHIGVsZW1lbnRzXG4gICAgICAgIG5zICA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsXG4gICAgICAgIFxuICAgICAgICAvLyBjaGFydCBsYXlvdXQgYXR0cmlidXRlc1xuICAgICAgICB3aWR0aCAgID0gMTAwMCxcbiAgICAgICAgaGVpZ2h0ICA9IDQwMCxcbiAgICAgICAgeE1hcmdpbiA9IDgwLFxuICAgICAgICB5TWFyZ2luID0gNDAsXG4gICAgICAgIHNwYWNlciAgPSA0MDtcbiAgICAgICAgXG5cbiAgICAvLyBDYWNoZSBET00gZWxlbWVudHNcbiAgICBmdW5jdGlvbiBjYWNoZURvbSgpIHtcbiAgICAgICAgRE9NLiRjb250YWluZXIgPSAkKCcuY2hhcnQtY29udGFpbmVyJyk7XG4gICAgICAgIERPTS4kc3ZnRWxlbSAgID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobnMsICdzdmcnKSk7XG4gICAgfVxuICAgIFxuICAgIFxuICAgIC8qIEZvcm1hdCBkYXRlc1xuICAgICAqXG4gICAgICogQHBhcmFtcyAgIFtzdHJpbmddICAgZGF0ZSAgIFtzdHJpbmcgZm9ybWF0dGVkIGRhdGVdXG4gICAgICogQHJldHVybnMgIFtzdHJpbmddICAgICAgICAgIFtmb3JtYXR0ZWQgZGF0ZSBzdHJpbmddXG4gICAgKi9cbiAgICBmdW5jdGlvbiBmb3JtYXREYXRlcyhkYXRlKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShkYXRlKSAgICAgLy8gbWFrZSBkYXRlIG9iamVjdCBmb3IgZGF5ICYgbW9udGggYWJicmV2XG4gICAgICAgICAgICAudG9EYXRlU3RyaW5nKCkgICAgICAgLy8gY29udmVydCBvYmplY3QgdG8gYSBzdHJpbmdcbiAgICAgICAgICAgIC5zbGljZSgwLCAxNSkgICAgICAgICAvLyByZW1vdmUgZXZlcnl0aGluZyBhZnRlciB0aGUgWVlZWVxuICAgICAgICAgICAgLnJlcGxhY2UoLyAwL2csICcgJyk7IC8vIHJlbW92ZSBsZWFkaW5nIHplcm9zIChleC4gJzA0JyA9PiAnNCcpXG4gICAgfVxuXG5cbiAgICAvLyBUZWFjaCBEYXRlIGEgbmV3IG1ldGhvZFxuICAgIERhdGUucHJvdG90eXBlLmFkZERheXMgPSBmdW5jdGlvbihkYXlzKSB7XG4gICAgICAgIHZhciBkYXQgPSBuZXcgRGF0ZSh0aGlzLnZhbHVlT2YoKSk7XG4gICAgICAgIGRhdC5zZXREYXRlKGRhdC5nZXREYXRlKCkgKyBkYXlzKTtcbiAgICAgICAgcmV0dXJuIGRhdDtcbiAgICB9O1xuICAgIFxuXG4gICAgLyogQnVpbGQgZGF0ZSByYW5nZVxuICAgICAqXG4gICAgICogQHBhcmFtcyAgIFthcnJheV0gICBldmVudHMgICBbc29ydGVkIGFycmF5IG9mIGV2ZW50c11cbiAgICAgKiBAcmV0dXJucyAgW2FycmF5XSAgICAgICAgICAgIFtyYW5nZSBvZiBkYXRlcyBmcm9tIGVhcmxpZXN0ID4gcmVjZW50XVxuICAgICovXG4gICAgZnVuY3Rpb24gYnVpbGREYXRlUmFuZ2UoZXZlbnRzKSB7XG4gICAgICAgIFxuICAgICAgICB2YXIgbm9ybURhdGVzICAgPSBldmVudHMubWFwKCAoZSkgPT4gKGZvcm1hdERhdGVzKGUuZGF0ZSkpICksXG4gICAgICAgICAgICBzdGFydERhdGUgICA9IG5ldyBEYXRlKG5vcm1EYXRlc1swXSksXG4gICAgICAgICAgICBzdG9wRGF0ZSAgICA9IG5ldyBEYXRlKG5vcm1EYXRlc1tub3JtRGF0ZXMubGVuZ3RoIC0gMV0pLFxuICAgICAgICAgICAgZGF0ZUFycmF5ICAgPSBbXSxcbiAgICAgICAgICAgIGN1cnJlbnREYXRlID0gc3RhcnREYXRlO1xuICAgICAgICBcbiAgICAgICAgd2hpbGUgKGN1cnJlbnREYXRlIDw9IHN0b3BEYXRlKSB7XG4gICAgICAgICAgICBkYXRlQXJyYXkucHVzaCggZm9ybWF0RGF0ZXMoY3VycmVudERhdGUpICk7XG4gICAgICAgICAgICBjdXJyZW50RGF0ZSA9IGN1cnJlbnREYXRlLmFkZERheXMoMSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmYW5jeSBzdGF0c1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnPT09PT09PT09IERBVEUgU1BFQ1MgPT09PT09PT09Jyk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdEYXlzIGluIHJhbmdlOiAnICsgZGF0ZUFycmF5Lmxlbmd0aCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCcgICBTdGFydCBkYXRlOiAnICsgc3RhcnREYXRlKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJyAgICBTdG9wIGRhdGU6ICcgKyBzdG9wRGF0ZSk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gZGF0ZUFycmF5O1xuICAgIH1cbiAgICAgICAgXG4gICAgXG4gICAgLyogQ2FsY3VsYXRlIG1heCBjaGFydCBZIGF4aXMgdmFsdWVcbiAgICAgKiBNYXggWSBpcyBtdWx0aXBsZSBvZiA1IHRvIG1ha2UgdGhlIGNoYXJ0IGxvb2sgbmljZVxuICAgICAqXG4gICAgICogQHBhcmFtcyAgIFthcnJheV0gICBwb2ludHMgICBbc29ydGVkIGV2ZW50cyBhcnJheV1cbiAgICAgKiBAcmV0dXJucyAgW251bWJlcl0gICAgICAgICAgIFtjYWxjdWxhdGVkIG1heCBZIGF4aXMgdmFsdWVdXG4gICAgKi9cbiAgICBmdW5jdGlvbiBnZXRDaGFydFlNYXgocG9pbnRzKSB7XG4gICAgICAgIHZhciBtYXhOdW1FdnRzLFxuICAgICAgICAgICAgcXVvdGllbnQ7XG5cbiAgICAgICAgbWF4TnVtRXZ0cyA9IHBvaW50cy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLm1heChhLCBiWzFdKTtcbiAgICAgICAgfSwgcG9pbnRzWzBdWzFdKTtcblxuICAgICAgICBxdW90aWVudCA9IE1hdGguZmxvb3IobWF4TnVtRXZ0cyAvIDQpO1xuXG4gICAgICAgIC8vIHJldHVybiAxIG1vcmUgdGhhbiB0aGUgcXVvdGllbnQsICogNVxuICAgICAgICByZXR1cm4gKChxdW90aWVudCArIDEpICogNCk7XG4gICAgfVxuICAgIFxuICAgIFxuICAgIC8qIFJlZm9ybWF0IGV2ZW50cyBhcnJheSBmb3IgY2hhcnRpbmcuXG4gICAgICogQWxsIGV2ZW50cyBhcmUgYWxyZWFkeSB1bmlxdWUgZXhjZXB0IHB1c2ggZXZlbnRzLCBiZWNhdXNlIHRoZXkgY29udGFpblxuICAgICAqIGFycmF5cyBvZiBjb21taXRzLiBXZSBtYWtlIGVhY2ggY29tbWl0IGEgc2VwYXJhdGUgZWxlbWVudC4gIFRoZW5cbiAgICAgKiBnZXQgbnVtIG9mIGV2ZW50cyBmb3IgZWFjaCBkYXRlICggc29ydGVkQXJyLmZpbHRlcigpLmxlbmd0aCgpICkuXG4gICAgICpcbiAgICAgKiBAcGFyYW1zICAgW2FycmF5XSAgIGVzICAgW3JhdyBldmVudHMgYXJyYXldXG4gICAgICogQHJldHVybnMgIFthcnJheV0gICAgICAgIFthcnJheSBvZiBkYXRlICYgbnVtYmVyIG9mIGV2ZW50c11cbiAgICAqL1xuICAgIGZ1bmN0aW9uIHByZXBhcmVEYXRlRXZlbnRzKGVzKSB7XG5cbiAgICAgICAgdmFyIGV2ZW50cyA9IFtdLFxuICAgICAgICAgICAgc29ydGVkRXZlbnRzLFxuICAgICAgICAgICAgZGF0ZUFycmF5LFxuICAgICAgICAgICAgY2hhcnREYXRhID0gW107XG4gICAgICAgIFxuICAgICAgICBlcy5mb3JFYWNoKGZ1bmN0aW9uIChldnQpIHtcblxuICAgICAgICAgICAgLy8gIGNvbnNvbGUubG9nKGV2dCk7ICAvLyBkaWFnXG5cbiAgICAgICAgICAgIGlmIChldnQudHlwZSA9PT0gJ1B1c2hFdmVudCcpIHtcblxuICAgICAgICAgICAgICAgIC8vIHdoZW4gaXQncyBhIHB1c2ggZXZlbnQsIGV4dHJhY3QgdGhlIGNvbW1pdHNcbiAgICAgICAgICAgICAgICBldnQucGF5bG9hZC5jb21taXRzLmZvckVhY2goZnVuY3Rpb24gKGNvbW1pdCkge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0b3I6IGV2dC5hY3RvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGF2YXRhcjogZXZ0LmF2YXRhcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGU6IGV2dC5kYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGF5bG9hZDogY29tbWl0LFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJDb21taXRcIlxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBldmVudHMucHVzaChldnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgLy8gc29ydCBldmVudHMgYXNjZW5kaW5nXG4gICAgICAgIHNvcnRlZEV2ZW50cyA9IGV2ZW50cy5zb3J0KCAoYSwgYikgPT4gbmV3IERhdGUoYS5kYXRlKSAtIG5ldyBEYXRlKGIuZGF0ZSkgKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coc29ydGVkRXZlbnRzKTsgLy8gb2tcbiAgICAgICAgXG4gICAgICAgIC8vIGdldCBhcnJheSBvZiBhbGwgZGF0ZXMgaW4gcmFuZ2VcbiAgICAgICAgZGF0ZUFycmF5ID0gYnVpbGREYXRlUmFuZ2Uoc29ydGVkRXZlbnRzKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coZGF0ZUFycmF5KTtcbiAgICAgICAgXG4gICAgICAgIC8vIGJ1aWxkIGFycmF5IG9mIGRhdGEgcG9pbnRzOiBbZGF0ZSwgI2V2ZW50cyBwZXIgZGF0ZV1cbiAgICAgICAgY2hhcnREYXRhID0gZGF0ZUFycmF5Lm1hcChmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyB0aGUgZGF0ZSwgYXMgTW9udGggYW5kIERheVxuICAgICAgICAgICAgICAgIGRhdGUuc2xpY2UoMywgMTApLFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIG51bWJlciBvZiBldmVudHMgcGVyIGRhdGVcbiAgICAgICAgICAgICAgICBzb3J0ZWRFdmVudHMuZmlsdGVyKCAoeCkgPT4gZm9ybWF0RGF0ZXMoeC5kYXRlKSA9PT0gZGF0ZSApLmxlbmd0aFxuICAgICAgICAgICAgXTsgICAgICAgICAgICBcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gY2hhcnREYXRhO1xuICAgIH1cbiAgICBcbiAgICBcbiAgICAvKiBjaGVjayBpZiBhbGwgZXZlbnRzIG9jY3VyIG9uIHRoZSBzYW1lIGRheVxuICAgICAqXG4gICAgICogQHBhcmFtcyAgIFthcnJheV0gICBwb2ludHNBcnIgICBbZXZlbnRzIGNvb3JkaW5hdGUgZGF0YSBwb2ludHNdXG4gICAgICogQHJldXRybnMgIFtib29sZWFuXSAgICAgICAgICAgICBbcmV0IHRydWUgaWYgYWxsIGV2ZW50cyBvbiAxIGRheV1cbiAgICAqL1xuICAgIGZ1bmN0aW9uIHNhbWVEYW1uRGF5KHBvaW50c0Fycikge1xuICAgICAgICByZXR1cm4gcG9pbnRzQXJyLmxlbmd0aCA9PT0gMTtcbiAgICB9XG4gICAgXG4gICAgLyogZ2VuZXJhdGUgZm9ybWF0dGVkIHBvaW50cyBhcnJheVxuICAgICAqXG4gICAgICogQHBhcmFtcyAgIFthcnJheV0gICAgcG9pbnRzICAgICAgW2FycmF5IG9mIGNvb3JkaW5hdGUgcG9pbnRzXVxuICAgICAqIEBwYXJhbXMgICBbbnVtYmVyXSAgIHhNdWx0aXBsZSAgIFttdWx0aXBsaWVyIHRvIHNjYWxlIGNvb3Jkc11cbiAgICAgKiBAcGFyYW1zICAgW251bWJlcl0gICB5TXVsdGlwbGUgICBbbXVsdGlwbGllciB0byBzY2FsZSBjb29yZHNdXG4gICAgICogQHJldHVybnMgIFthcnJheV0gICBcbiAgICAqL1xuICAgIGZ1bmN0aW9uIGdlbkZvcm1hdHRlZFBvaW50cyhwb2ludHMsIHhNdWx0aXBsZSwgeU11bHRpcGxlKSB7XG4gICAgICAgIHJldHVybiBwb2ludHMubWFwKGZ1bmN0aW9uKHBvaW50LCBpbmQpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgKGluZCAqIHhNdWx0aXBsZSkgKyB4TWFyZ2luLFxuICAgICAgICAgICAgICAgIChoZWlnaHQgLSAocG9pbnRbMV0gKiB5TXVsdGlwbGUpKSAtIHlNYXJnaW5cbiAgICAgICAgICAgIF07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICBcbiAgICAvKiBnZW5lcmF0ZSBjaGFydCBwb2ludHNcbiAgICAgKlxuICAgICAqIEBwYXJhbXMgIFthcnJheV0gICAgcG9pbnRzICBbYXJyYXkgb2YgY29vcmRpbmF0ZSBwb2ludHNdXG4gICAgICogQHJldHVybnMgW29iamVjdF0gICAgICAgICAgIFs8Zz5yb3VwIG9mIDxjaXJjbGU+IGVsZW1lbnRzXVxuICAgICovXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVDaXJjbGVzKHBvaW50cykge1xuXG4gICAgICAgIC8vIGluaXQgdmFyc1xuICAgICAgICB2YXIgZ3JvdXAgPSAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhucywgJ2cnKSksXG4gICAgICAgICAgICBjdXJyZW50UG9pbnQsXG4gICAgICAgICAgICBudW1Qb2ludHMgPSBwb2ludHMubGVuZ3RoIC0gMSxcbiAgICAgICAgICAgIGNoYXJ0WU1heCA9IGdldENoYXJ0WU1heChwb2ludHMpLFxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBtdWx0aXBsaWVycyBzY2FsZSB0aGUgb3V0cHV0IHggJiB5IGNvb3Jkc1xuICAgICAgICAgICAgeE11bHRpcGxlID0gKHdpZHRoIC0geE1hcmdpbiAtIHNwYWNlcikgLyBudW1Qb2ludHMsXG4gICAgICAgICAgICB5TXVsdGlwbGUgPSAoaGVpZ2h0IC0geU1hcmdpbiAtIHNwYWNlcikgLyBjaGFydFlNYXgsXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGZvcm1hdCB2YWx1ZXMgdG8gYWxpZ24gd2l0aCBjaGFydCBleHRlbnRzXG4gICAgICAgICAgICBmb3JtYXR0ZWRQb2ludHMgPSBnZW5Gb3JtYXR0ZWRQb2ludHMocG9pbnRzLCB4TXVsdGlwbGUsIHlNdWx0aXBsZSk7XG4gICAgICAgIFxuICAgICAgICAvLyBsb29wIHRocm91Z2ggcG9pbnRzIGFycmF5IGFwcGVuZGluZyBjaXJjbGVzIHRvIGdyb3VwXG4gICAgICAgIGZvcm1hdHRlZFBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChwb2ludCwgaW5kKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBjaXJjbGUgPSAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhucywgJ2NpcmNsZScpKSxcbiAgICAgICAgICAgICAgICB0aXRsZSAgPSAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhucywgJ3RpdGxlJykpLFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIDxjaXJjbGU+IHdhbnRzIGF0dHJzOiBjeCwgY3ksIHJcbiAgICAgICAgICAgICAgICBjeCA9IHBvaW50WzBdLFxuICAgICAgICAgICAgICAgIGN5ID0gcG9pbnRbMV0sXG4gICAgICAgICAgICAgICAgciAgPSA0O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjaXJjbGVcbiAgICAgICAgICAgICAgICAuYXR0cignY3gnLCBjeClcbiAgICAgICAgICAgICAgICAuYXR0cignY3knLCBjeSlcbiAgICAgICAgICAgICAgICAuYXR0cigncicsIHIpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyA8dGl0bGU+IGFkZHMgJ3Rvb2wgdGlwJyBvbiBob3ZlclxuICAgICAgICAgICAgdGl0bGUudGV4dChwb2ludHNbaW5kXVswXSArICcgKCcgKyBwb2ludHNbaW5kXVsxXSArICcgZXZlbnRzKScpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBhcHBlbmQgdGl0bGUgdG8gY2lyY2xlXG4gICAgICAgICAgICBjaXJjbGUuYXBwZW5kKHRpdGxlKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gYXBwZW5kIGNpcmNsZSB0byBncm91cFxuICAgICAgICAgICAgZ3JvdXBcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ2NoYXJ0LWNpcmNsZScpXG4gICAgICAgICAgICAgICAgLmFwcGVuZChjaXJjbGUpOyBcblxuICAgICAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gZ3JvdXA7XG4gICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIC8qIGdlbmVyYXRlIGNoYXJ0IGxpbmVcbiAgICAgKlxuICAgICAqIEBwYXJhbXMgIFthcnJheV0gICAgcG9pbnRzICBbYXJyYXkgb2YgY29vcmRpbmF0ZSBwb2ludHNdXG4gICAgICogQHJldHVybnMgW29iamVjdF0gICAgICAgICAgIFs8Zz5yb3VwIG9mIDxsaW5lPiBzZWdtZW50c11cbiAgICAqL1xuICAgIGZ1bmN0aW9uIGdlbmVyYXRlTGluZXMocG9pbnRzKSB7XG4gICAgICAgIFxuICAgICAgICAvLyBpbml0IHZhcnNcbiAgICAgICAgdmFyIGdyb3VwID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobnMsICdnJykpLFxuICAgICAgICAgICAgY3VycmVudFBvaW50LFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGxpbmUsXG4gICAgICAgICAgICBudW1Qb2ludHMgPSBwb2ludHMubGVuZ3RoIC0gMSxcbiAgICAgICAgICAgIGNoYXJ0WU1heCA9IGdldENoYXJ0WU1heChwb2ludHMpLFxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBtdWx0aXBsaWVycyBzY2FsZSB0aGUgb3V0cHV0IHggJiB5IGNvb3Jkc1xuICAgICAgICAgICAgeE11bHRpcGxlID0gKHdpZHRoIC0geE1hcmdpbiAtIHNwYWNlcikgLyBudW1Qb2ludHMsXG4gICAgICAgICAgICB5TXVsdGlwbGUgPSAoaGVpZ2h0IC0geU1hcmdpbiAtIHNwYWNlcikgLyBjaGFydFlNYXgsXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGZvcm1hdCB2YWx1ZXMgdG8gYWxpZ24gd2l0aCBjaGFydCBleHRlbnRzXG4gICAgICAgICAgICBmb3JtYXR0ZWRQb2ludHMgPSBnZW5Gb3JtYXR0ZWRQb2ludHMocG9pbnRzLCB4TXVsdGlwbGUsIHlNdWx0aXBsZSk7XG4gICAgICAgIFxuICAgICAgICAvLyBsb29wIHRocm91Z2ggcG9pbnRzIGFycmF5IGFwcGVuZGluZyBsaW5lcyB0byBncm91cFxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZm9ybWF0dGVkUG9pbnRzLmxlbmd0aCAtIDE7IGkgKz0gMSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBsaW5lID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobnMsICdsaW5lJykpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBkZXNjcmliZSA8bGluZT5cbiAgICAgICAgICAgIGxpbmVcbiAgICAgICAgICAgICAgICAuYXR0cigneDEnLCBmb3JtYXR0ZWRQb2ludHNbaV1bMF0pXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3kxJywgZm9ybWF0dGVkUG9pbnRzW2ldWzFdKVxuICAgICAgICAgICAgICAgIC5hdHRyKCd4MicsIGZvcm1hdHRlZFBvaW50c1tpICsgMV1bMF0pXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3kyJywgZm9ybWF0dGVkUG9pbnRzW2kgKyAxXVsxXSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBhcHBlbmQgPGxpbmU+IHRvIDxnPnJvdXBcbiAgICAgICAgICAgIGdyb3VwXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdjaGFydC1saW5lJylcbiAgICAgICAgICAgICAgICAuYXBwZW5kKGxpbmUpO1xuICAgICAgICB9XG4gICAgXG4gICAgcmV0dXJuIGdyb3VwO1xuICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICAvKiBnZW5lcmF0ZSBheGlzIGxhYmVsc1xuICAgICAqXG4gICAgICogQHBhcmFtcyAgW2FycmF5XSAgICBwb2ludHMgIFthcnJheSBvZiBjb29yZGluYXRlIHBvaW50c11cbiAgICAgKiBAcGFyYW1zICBbc3RyaW5nXSAgIGF4aXMgICAgWyd5JyBvciAneCcgc3BlY2lmaWVzIGNvbmRpdGlvbmFsIHBhdGhdXG4gICAgICogQHJldHVybnMgW29iamVjdF0gICAgICAgICAgIFs8Zz5yb3VwIG9mIGF4aXMgPGxpbmU+IGFuZCA8dGV4dD4gZWxzXVxuICAgICovXG4gICAgZnVuY3Rpb24gZ2VuQXhpc0xhYmVscyhwb2ludHMsIGF4aXMpIHtcbiAgICAgICAgXG4gICAgICAgIHZhciBncm91cCA9ICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5zLCAnZycpKSxcbiAgICAgICAgICAgIGxpbmUsIC8vIHBsYWNlaG9sZGVyIGZvciA8bGluZT4gZWxlbWVudCBidWlsdCBpbiBsb29wXG4gICAgICAgICAgICB0ZXh0LCAvLyBwbGFjZWhvbGRlciBmb3IgPHRleHQ+IGVsZW1lbnQgYnVpbHQgaW4gbG9vcFxuICAgICAgICAgICAgbnVtQXhpc1RpY2tzLFxuICAgICAgICAgICAgeFBvcywgeFZhbHVlLCB4TXVsdGlwbGUsXG4gICAgICAgICAgICB5UG9zLCB5VmFsdWUsIHlTcGFjaW5nLFxuICAgICAgICAgICAgY2hhcnRZTWF4ID0gZ2V0Q2hhcnRZTWF4KHBvaW50cyksXG4gICAgICAgICAgICBpO1xuICAgICAgICBcbiAgICAgICAgLy8gY29uZGl0aW9uYWxseSBoYW5kbGUgcGFzc2VkIGF4aXMgcGFyYW1cbiAgICAgICAgaWYgKGF4aXMgPT09ICd5Jykge1xuICAgICAgICAgICAgLy8gYWRkIENTUyBjbGFzcyB0byA8Zz4gZWxlbWVudFxuICAgICAgICAgICAgZ3JvdXAuYWRkQ2xhc3MoJ2xhYmVscyB5LWxhYmVscycpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBsaW1pdCBxdHkgb2YgWSBheGlzIGxhYmVscyBiYXNlZCBvbiBjaGFydFlNYXhcbiAgICAgICAgICAgIG51bUF4aXNUaWNrcyA9IChjaGFydFlNYXggPiAxMikgPyBjaGFydFlNYXggLyA0IDogY2hhcnRZTWF4O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBjYWxjdWxhdGUgcmVsYXRpdmUgc3BhY2UgYmV0d2VlbiBlYWNoIFkgYXhpcyBsYWJlbFxuICAgICAgICAgICAgeVNwYWNpbmcgPSAoaGVpZ2h0IC0geU1hcmdpbiAtIHNwYWNlcikgLyBudW1BeGlzVGlja3M7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGxvb3AgdGhyb3VnaCBudW1BeGlzVGlja3MsIGdlbmVyYXRlIDxsaW5lPiBhbmQgPHRleHQ+IGVsZW1lbnRzLFxuICAgICAgICAgICAgLy8gdGhlbiBhcHBlbmQgZWFjaCBvZiB0aGVtIHRvIG91ciA8Zz5yb3VwXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtQXhpc1RpY2tzICsgMTsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gY2FsY3VsYXRlIHkgYXhpcyBsYWJlbCB2YWx1ZVxuICAgICAgICAgICAgICAgIHlWYWx1ZSA9IGkgKiBjaGFydFlNYXggLyBudW1BeGlzVGlja3M7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gY2FsY3VsYXRlIHkgYXhpcyBsYWJlbCBwb3NpdGlvblxuICAgICAgICAgICAgICAgIHlQb3MgPSBoZWlnaHQgLSB5TWFyZ2luIC0gKHlTcGFjaW5nICogaSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIG5ldyA8bGluZT4gZWxlbWVudFxuICAgICAgICAgICAgICAgIGxpbmUgPSAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhucywgJ2xpbmUnKSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gYWRkIGF0dHJpYnV0ZXMgdG8gPGxpbmU+IGVsZW1lbnRcbiAgICAgICAgICAgICAgICBsaW5lLmFkZENsYXNzKCdob3Jpei1ydWxlJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3gxJywgeE1hcmdpbilcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3kxJywgeVBvcylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3gyJywgKHdpZHRoIC0gc3BhY2VyICsgNSkpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd5MicsIHlQb3MpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBuZXcgPHRleHQ+IGVsZW1lbnRcbiAgICAgICAgICAgICAgICB0ZXh0ID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobnMsICd0ZXh0JykpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIGFkZCBhdHRyaWJ1dGVzIHRvIDx0ZXh0PiBlbGVtZW50XG4gICAgICAgICAgICAgICAgdGV4dFxuICAgICAgICAgICAgICAgICAgICAuYXR0cigneCcsICh4TWFyZ2luIC0gMjApKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cigneScsICh5UG9zICsgNCkpXG4gICAgICAgICAgICAgICAgICAgIC5odG1sKHlWYWx1ZSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZ3JvdXBcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChsaW5lKVxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKHRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGdyb3VwO1xuICAgICAgICBcbiAgICAgICAgfSBlbHNlIGlmIChheGlzID09PSAneCcgfHwgIWF4aXMgfHwgYXhpcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBhZGQgQ1NTIGNsYXNzIHRvIHRoZSA8Zz5yb3VwXG4gICAgICAgICAgICBncm91cC5hZGRDbGFzcygnbGFiZWxzIHgtbGFiZWxzJyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIG51bUF4aXNUaWNrcyA9IHBvaW50cy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgeE11bHRpcGxlID0gKHdpZHRoIC0geE1hcmdpbiAtIHNwYWNlcikgLyBudW1BeGlzVGlja3M7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGxvb3AgdGhyb3VnaCBwb2ludHMsIGdlbmVyYXRlIDxsaW5lPiBhbmQgPHRleHQ+IGVsZW1lbnRzLFxuICAgICAgICAgICAgLy8gYW5kIGFwcGVuZCBlYWNoIG9mIHRoZW0gdG8gb3VyIDxnPiBncm91cFxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRleHQgPSAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhucywgJ3RleHQnKSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gY2FsY3VsYXRlIHkgYXhpcyBsYWJlbCB2YWx1ZXNcbiAgICAgICAgICAgICAgICB4VmFsdWUgPSBwb2ludHNbaV1bMF07XG5cbiAgICAgICAgICAgICAgICAvLyBjYWxjdWxhdGUgeSBwb3NpdGlvblxuICAgICAgICAgICAgICAgIHhQb3MgPSBpICogeE11bHRpcGxlO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIGFkZCBhdHRyaWJ1dGVzIHRvIDx0ZXh0PiBlbGVtZW50XG4gICAgICAgICAgICAgICAgdGV4dFxuICAgICAgICAgICAgICAgICAgICAuYXR0cigneCcsICh4UG9zICsgeE1hcmdpbikpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd5JywgKGhlaWdodCAtIDUpKVxuICAgICAgICAgICAgICAgICAgICAudGV4dCh4VmFsdWUpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIGZvciBsYXJnZSBkYXRhc2V0cywgb25seSBhcHBlbmQgZXZlcnkgMTB0aCBkYXRlXG4gICAgICAgICAgICAgICAgaWYgKHBvaW50cy5sZW5ndGggPiAyMCkge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IDAgfHwgaSAlIDEwID09PSAwIHx8IGkgPT09IChwb2ludHMubGVuZ3RoIC0gMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQuYXBwZW5kVG8oZ3JvdXApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdGV4dC5hcHBlbmRUbyhncm91cCk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh4VmFsdWUpO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZ3JvdXA7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuXG4gICAgXG4gICAgLy8gTUFJTiBSRU5ERVJFUlxuICAgIC8vIFJlY2VpdmVzIEFMTCBldmVudHMgZnJvbSAnZ2V0LWV2ZW50cy5qcydcbiAgICBmdW5jdGlvbiByZW5kZXIoZXZlbnRzKSB7XG4gICAgICAgIFxuICAgICAgICB2YXIgcG9pbnRzO1xuICAgICAgICBcbiAgICAgICAgLy8gZW1wdHkgcGFyZW50IFNWRyBlbGVtZW50IGJlZm9yZSBlYWNoIHJlbmRlclxuICAgICAgICBET00uJHN2Z0VsZW0uZW1wdHkoKTtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICAvLyBhZGQgQ1NTIGNsYXNzLCBuYW1lc3BhY2UgYW5kIGF0dHJpYnV0ZXMgdG8gbWFpbiA8c3ZnPiBlbGVtZW50XG4gICAgICAgIERPTS4kc3ZnRWxlbVxuICAgICAgICAgICAgLmFkZENsYXNzKCdjaGFydC0tY29udGVudCcpXG4gICAgICAgICAgICAuYXR0cignaWQnLCAnc3ZnJylcbiAgICAgICAgICAgIC5hdHRyKCd4bWxucycsIG5zKVxuICAgICAgICAgICAgLy8gLmF0dHIoJ3dpZHRoJywgJzEwMCUnKVxuICAgICAgICAgICAgLmF0dHIoJ2hlaWdodCcsICcxMDAlJylcbiAgICAgICAgICAgIC5hdHRyKCd2aWV3Qm94JywgJzAgMCAnICsgd2lkdGggKyAnICcgKyBoZWlnaHQpXG4gICAgICAgICAgICAuYXR0cigneG1sOnNwYWNlJywgJ3ByZXNlcnZlJyk7XG4gICAgICAgIFxuICAgICAgICBpZiAoZXZlbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gZm9ybWF0IGV2ZW50cyB0byB1c2FibGUgcG9pbnRzXG4gICAgICAgICAgICBwb2ludHMgPSBwcmVwYXJlRGF0ZUV2ZW50cyhldmVudHMpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBjaGVjayBpZiBBTEwgZXZlbnRzIG9jY3VyIG9uIHRoZSBzYW1lIGRheSFcbiAgICAgICAgICAgIGlmIChzYW1lRGFtbkRheShwb2ludHMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBhcHBlbmQgYXhpcyBsYWJlbCA8dGV4dD4gPGc+cm91cHNcbiAgICAgICAgICAgIERPTS4kc3ZnRWxlbVxuICAgICAgICAgICAgICAgIC5hcHBlbmQoZ2VuQXhpc0xhYmVscyhwb2ludHMsICd5JykpXG4gICAgICAgICAgICAgICAgLmFwcGVuZChnZW5BeGlzTGFiZWxzKHBvaW50cywgJ3gnKSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGFwcGVuZCBsaW5lXG4gICAgICAgICAgICBET00uJHN2Z0VsZW1cbiAgICAgICAgICAgICAgICAuYXBwZW5kKGdlbmVyYXRlTGluZXMocG9pbnRzKSk7XG5cbiAgICAgICAgICAgIC8vIGFwcGVuZCBwb2ludHMvY2lyY2xlcyA8Zz5yb3VwXG4gICAgICAgICAgICBET00uJHN2Z0VsZW1cbiAgICAgICAgICAgICAgICAuYXBwZW5kKGdlbmVyYXRlQ2lyY2xlcyhwb2ludHMpKTtcblxuICAgICAgICAgICAgLy8gYXBwZW5kIFNWRyB0byBjb250YWluZXJcbiAgICAgICAgICAgIERPTS4kY29udGFpbmVyXG4gICAgICAgICAgICAgICAgLmFwcGVuZChET00uJHN2Z0VsZW0pO1xuICAgICAgICAgICAgXG4gICAgICAgIH0gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbiAgICAvLyBwdWJsaWMgaW5pdCBtZXRob2RcbiAgICBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICBjYWNoZURvbSgpO1xuICAgIH1cblxuXG4gICAgLy8gcmV0dXJuIHB1YmxpYyBtZXRob2RzXG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5pdDogaW5pdCxcbiAgICAgICAgcmVuZGVyOiByZW5kZXJcbiAgICB9O1xuXG59KGpRdWVyeSkpO1xuIiwiLyoganNoaW50IGVzdmVyc2lvbjo2ICovXG4vKiBnbG9iYWxzIGpRdWVyeSwgZG9jdW1lbnQsIGNvbnNvbGUsIExTLCBIaXRBcGkgKi9cblxudmFyIFJlcG9TZWxlY3QgPSAoZnVuY3Rpb24gKCQpIHtcblxuICAgIHZhciBET00gICA9IHt9LFxuICAgICAgICByZXBvcyA9IFtdLFxuICAgICAgICBzZWxlY3RlZFJlcG87XG4gICAgXG4gICAgXG4gICAgLy8gdXRpbCBjaGVja3MgbG9jYWwgc3RvcmFnZSBmb3IgcHJldmlvdXNseSBzYXZlZCBsaXN0IG9mIHJlcG9zXG4gICAgdmFyIGNoZWNrU3RvcmFnZSA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIExTLmdldERhdGEoJ2Rldi1kYXNoLXJlcG9zJykgPyB0cnVlIDogZmFsc2U7XG4gICAgfSgpKTtcblxuXG4gICAgLy8gY2FjaGUgRE9NIGVsZW1lbnRzXG4gICAgZnVuY3Rpb24gY2FjaGVEb20oKSB7XG4gICAgICAgIERPTS4kc2VsZWN0Q29udGFpbmVyID0gJCgnLnJlcG8tc2VsZWN0Jyk7XG4gICAgICAgIERPTS4kcCAgICAgICAgICAgICAgID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJykpO1xuICAgICAgICBET00uJGxpc3RDb250YWluZXIgICA9ICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpO1xuICAgICAgICBET00uJHVsICAgICAgICAgICAgICA9ICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKSk7XG4gICAgICAgIERPTS4kbmV3UmVwb0Zvcm0gICAgID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJykpO1xuICAgICAgICBET00uJG5ld1JlcG9Vc2VyICAgICA9ICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKSk7XG4gICAgICAgIERPTS4kbmV3UmVwb1JlcG8gICAgID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpKTtcbiAgICAgICAgRE9NLiRuZXdSZXBvQnRuICAgICAgPSAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpKTtcbiAgICB9XG5cblxuICAgIC8vIGJpbmQgZXZlbnRzXG4gICAgZnVuY3Rpb24gYmluZEV2ZW50cygpIHtcbiAgICAgICAgRE9NLiRzZWxlY3RDb250YWluZXIub24oJ2NsaWNrJywgJy5yZXBvLXNlbGVjdC1oaWdobGlnaHQnLCBzaG93UmVwb0xpc3QpO1xuICAgICAgICBET00uJHVsLm9uKCdjbGljaycsICdkaXYubGktZGVzY3JpcHRpb25zJywgc2VsZWN0UmVwbyk7XG4gICAgICAgIERPTS4kdWwub24oJ2NsaWNrJywgJ3NwYW4ubGktcmVtb3ZlJywgZGVsZXRlUmVwbyk7XG4gICAgICAgIERPTS4kbmV3UmVwb0Zvcm0ub24oJ3N1Ym1pdCcsIGFkZFJlcG8pO1xuICAgIH1cbiAgICBcbiAgICBcbiAgICAvLyBzaG93L2hpZGUgcmVwbyBsaXN0XG4gICAgZnVuY3Rpb24gc2hvd1JlcG9MaXN0KGUpIHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICBET00uJGxpc3RDb250YWluZXJcbiAgICAgICAgICAgIC50b2dnbGVDbGFzcygnaGlkZGVuJyk7XG4gICAgfVxuICAgIFxuICAgIFxuICAgIC8vIHNlbGVjdCBhIHJlcG8gdG8gdmlld1xuICAgIGZ1bmN0aW9uIHNlbGVjdFJlcG8oZSkge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBcbiAgICAgICAgdmFyIHBpY2tlZCA9IGUuY3VycmVudFRhcmdldC5jaGlsZHJlblswXS5pbm5lckhUTUwuc3BsaXQoJyAvICcpO1xuICAgICAgICBcbiAgICAgICAgc2VsZWN0ZWRSZXBvID0gcGlja2VkWzFdO1xuICAgICAgICBcbiAgICAgICAgLy8gY29uc29sZS5sb2cocGlja2VkKTsgLy8gZGlhZ1xuICAgICAgICBwb3B1bGF0ZU1lbnUocmVwb3MpO1xuICAgICAgICAgICAgXG4gICAgICAgIC8vIENhbGwgSGl0QXBpIG1vZHVsZSdzIHB1YmxpYyAuZ2V0RXZlbnRzKCkgbWV0aG9kXG4gICAgICAgIEhpdEFwaS5nZXRFdmVudHMocGlja2VkWzBdLCBwaWNrZWRbMV0pO1xuICAgICAgICBcbiAgICAgICAgLy8gcmV0cmFjdCByZXBvIGxpc3RcbiAgICAgICAgRE9NLiRsaXN0Q29udGFpbmVyXG4gICAgICAgICAgICAuYWRkQ2xhc3MoJ2hpZGRlbicpO1xuICAgIH1cbiAgICBcbiAgICBcbiAgICAvLyBkZWxldGUgcmVwbyBmcm9tIHRoZSBsaXN0XG4gICAgZnVuY3Rpb24gZGVsZXRlUmVwbyhlKSB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIFxuICAgICAgICB2YXIgYXV0aG9yQW5kUmVwbyAgID0gZS50YXJnZXQucHJldmlvdXNFbGVtZW50U2libGluZy5kYXRhc2V0LnJlcG8sXG4gICAgICAgICAgICBzZWxlY3RlZEVsZW1lbnQgPSAkKGUudGFyZ2V0KS5wYXJlbnQoKSxcbiAgICAgICAgICAgIHNlbGVjdGVkRWxlbUlkICA9IHNlbGVjdGVkRWxlbWVudC5hdHRyKCdpZCcpO1xuICAgICAgICBcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ0RlbGV0ZTogJyArIGF1dGhvckFuZFJlcG8pOyAvLyBkaWFnXG4gICAgICAgIFxuICAgICAgICByZXBvcy5zcGxpY2Uoc2VsZWN0ZWRFbGVtSWQsIDEpO1xuICAgICAgICBzZWxlY3RlZEVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgIExTLnNldERhdGEoJ2Rldi1kYXNoLXJlcG9zJywgcmVwb3MpO1xuICAgIH1cbiAgICBcbiAgICBcbiAgICAvLyBhZGQgcmVwbyB0byB0aGUgbGlzdFxuICAgIGZ1bmN0aW9uIGFkZFJlcG8oZSkge1xuICAgICAgICBcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBcbiAgICAgICAgdmFyIGFwaVVybCAgICA9ICdodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zJyxcbiAgICAgICAgICAgIG5ld0F1dGhvciA9IGUuY3VycmVudFRhcmdldFswXS52YWx1ZSxcbiAgICAgICAgICAgIG5ld1JlcG8gICA9IGUuY3VycmVudFRhcmdldFsxXS52YWx1ZTtcbiAgICAgICAgXG4gICAgICAgICQuZ2V0SlNPTihgJHthcGlVcmx9LyR7bmV3QXV0aG9yfS8ke25ld1JlcG99YClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXBvKSB7XG4gICAgICAgICAgICAgICAgcmVwb3MudW5zaGlmdChyZXBvKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIGNsZWFyIGlucHV0c1xuICAgICAgICAgICAgICAgIERPTS4kbmV3UmVwb1VzZXJbMF0udmFsdWUgPSAnJztcbiAgICAgICAgICAgICAgICBET00uJG5ld1JlcG9SZXBvWzBdLnZhbHVlID0gJyc7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVwb3M7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oc2F2ZVJlcG9zKVxuICAgICAgICAgICAgLnRoZW4ocG9wdWxhdGVNZW51KVxuICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0Vycm9yIGZldGNoaW5nIHJlcG8uJyk7XG4gICAgICAgICAgICB9KTtcbiAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIC8vIHBvcHVsYXRlIG1vZHVsZSBzY29wZSByZXBvcyBhcnJheSAmIGNhbGwgSGl0QXBpIG9uIDFzdCBsb2FkXG4gICAgZnVuY3Rpb24gcG9wdWxhdGVSZXBvcyhkYXRhKSB7XG4gICAgICAgIFxuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLmxlbmd0aCkge1xuXG4gICAgICAgIFxuICAgICAgICAgICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChyZXBvKSB7XG4gICAgICAgICAgICAgICAgcmVwb3MucHVzaChyZXBvKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBjYXB0dXJlIDFzdCByZXBvJ3MgYXV0aG9yICYgcmVwbyBuYW1lIGluIGFuIGFycmF5XG4gICAgICAgICAgICB2YXIgcmVwb1plcm8gPSByZXBvc1swXS5mdWxsX25hbWUuc3BsaXQoJy8nKTtcblxuICAgICAgICAgICAgLy8gc2V0IHNlbGVjdGVkIHJlcG8gdG8gZmlyc3QgcmVwbydzIG5hbWVcbiAgICAgICAgICAgIHNlbGVjdGVkUmVwbyA9IHJlcG9aZXJvWzFdO1xuXG4gICAgICAgICAgICAvLyBDYWxsIEhpdEFwaSBtb2R1bGUncyBwdWJsaWMgLmdldEV2ZW50cygpIG1ldGhvZFxuICAgICAgICAgICAgSGl0QXBpLmdldEV2ZW50cyhyZXBvWmVyb1swXSwgcmVwb1plcm9bMV0pO1xuXG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBcbiAgICAvLyBzYXZlIHJlcG9zIHRvIGxvY2FsIHN0b3JhZ2VcbiAgICBmdW5jdGlvbiBzYXZlUmVwb3MoZGF0YSkge1xuICAgICAgICBMUy5zZXREYXRhKCdkZXYtZGFzaC1yZXBvcycsIHJlcG9zKTtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIFxuICAgIFxuICAgIC8vIHBvcHVsYXRlIHJlcG8gbGlzdCBtZW51XG4gICAgZnVuY3Rpb24gcG9wdWxhdGVNZW51KGRhdGEpIHtcbiAgICAgICAgXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICBcbiAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgRE9NLiR1bC5odG1sKCcnKTtcblxuICAgICAgICAgICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChyZXBvLCBpbmQpIHtcbiAgICAgICAgICAgICAgICB2YXIgJGxpID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpKTtcblxuICAgICAgICAgICAgICAgICRsaVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignaWQnLCBpbmQpXG4gICAgICAgICAgICAgICAgICAgIC5odG1sKGA8ZGl2IGNsYXNzPVwibGktZGVzY3JpcHRpb25zXCIgZGF0YS1yZXBvPVwiJHtyZXBvLm5hbWV9XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPiR7cmVwby5vd25lci5sb2dpbn0gLyAke3JlcG8ubmFtZX08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPiR7cmVwby5kZXNjcmlwdGlvbn08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibGktcmVtb3ZlXCI+JiMxMDA2MDwvc3Bhbj5gKTtcblxuICAgICAgICAgICAgICAgIERPTS4kdWxcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkbGkpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJlbmRlcigpO1xuICAgICAgICBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdubyByZXBvcywgaG9sbWVzJyk7XG4gICAgICAgICAgICByZW5kZXIoKTtcbiAgICAgICAgICAgIERPTS4kbGlzdENvbnRhaW5lclxuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgXG4gICAgLy8gcmVuZGVyXG4gICAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIERPTS4kbmV3UmVwb0J0blxuICAgICAgICAgICAgLmh0bWwoJysnKTtcblxuICAgICAgICBET00uJG5ld1JlcG9Vc2VyXG4gICAgICAgICAgICAuYXR0cigncmVxdWlyZWQnLCAndHJ1ZScpXG4gICAgICAgICAgICAuYXR0cigncGxhY2Vob2xkZXInLCAnYXV0aG9yJyk7XG5cbiAgICAgICAgRE9NLiRuZXdSZXBvUmVwb1xuICAgICAgICAgICAgLmF0dHIoJ3JlcXVpcmVkJywgJ3RydWUnKVxuICAgICAgICAgICAgLmF0dHIoJ3BsYWNlaG9sZGVyJywgJ3JlcG8nKTtcblxuICAgICAgICBET00uJG5ld1JlcG9Gb3JtXG4gICAgICAgICAgICAuYWRkQ2xhc3MoJ25ldy1yZXBvLWZvcm0nKVxuICAgICAgICAgICAgLmFwcGVuZChET00uJG5ld1JlcG9Vc2VyKVxuICAgICAgICAgICAgLmFwcGVuZChET00uJG5ld1JlcG9SZXBvKVxuICAgICAgICAgICAgLmFwcGVuZChET00uJG5ld1JlcG9CdG4pO1xuXG4gICAgICAgIERPTS4kbGlzdENvbnRhaW5lclxuICAgICAgICAgICAgLmFkZENsYXNzKCdyZXBvLWxpc3QnKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAuYXBwZW5kKERPTS4kdWwpXG4gICAgICAgICAgICAuYXBwZW5kKERPTS4kbmV3UmVwb0Zvcm0pO1xuICAgICAgICBcbiAgICAgICAgRE9NLiRwXG4gICAgICAgICAgICAuaHRtbChgWW91IGFyZSBjdXJyZW50bHkgdmlld2luZyB0aGUgPHNwYW4gY2xhc3M9XCJyZXBvLXNlbGVjdC1oaWdobGlnaHRcIj4ke3NlbGVjdGVkUmVwb30mI3gyNUJDOzwvc3Bhbj4gcmVwb3NpdG9yeS5gKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgRE9NLiRzZWxlY3RDb250YWluZXJcbiAgICAgICAgICAgIC5hcHBlbmQoRE9NLiRwKVxuICAgICAgICAgICAgLmFwcGVuZChET00uJGxpc3RDb250YWluZXIpO1xuXG4gICAgfVxuXG5cbiAgICAvLyBwdWJsaWMgbWV0aG9kIHRvIGtpY2sgb2YgdGhlIHdob2xlIG1vZHVsZVxuICAgIGZ1bmN0aW9uIGdldFJlcG9zKHVzZXJOYW1lKSB7XG4gICAgICAgIFxuICAgICAgICBpZiAoY2hlY2tTdG9yYWdlKSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnVXNpbmcgbG9jYWwgc3RvcmFnZScpOyAvLyBkaWFnXG4gICAgICAgICAgICBwb3B1bGF0ZVJlcG9zKExTLmdldERhdGEoJ2Rldi1kYXNoLXJlcG9zJykpOyAvLyBjYWNoZSAncmVwb3MnIHRvIG1vZHVsZSBzY29wZSB2YXJcbiAgICAgICAgICAgIHBvcHVsYXRlTWVudShyZXBvcyk7ICAvLyBidWlsZCB0aGUgbGlzdFxuICAgICAgICAgICAgXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGdldCB1c2VyJ3MgbW9zdCByZWNlbnRseS1hY3RpdmUgcmVwb3MgZnJvbSBHaXRIdWJcbiAgICAgICAgICAgICQuZ2V0SlNPTignaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS91c2Vycy8nICtcbiAgICAgICAgICAgICAgICAgICAgICB1c2VyTmFtZSArXG4gICAgICAgICAgICAgICAgICAgICAgJy9yZXBvcz9zb3J0PXVwZGF0ZWQnKVxuICAgICAgICAgICAgICAgIC50aGVuKCAocmVwb3MpID0+IHJlcG9zLnNsaWNlKDAsIDMpICkgLy8gbW9zdC1yZWNlbnQgMyByZXBvc1xuICAgICAgICAgICAgICAgIC50aGVuKHBvcHVsYXRlUmVwb3MpICAvLyBjYWNoZSByZXBvcyB0byBtb2R1bGUgc2NvcGUgJ3JlcG9zJ2FycmF5XG4gICAgICAgICAgICAgICAgLnRoZW4oc2F2ZVJlcG9zKSAgICAgIC8vIHNhdmUgdGhlbSBpbiBsb2NhbCBzdG9yYWdlXG4gICAgICAgICAgICAgICAgLnRoZW4ocG9wdWxhdGVNZW51KTsgIC8vIGJ1aWxkIHRoZSBsaXN0XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBcbiAgICAvLyBwdWJsaWMgaW5pdCBtZXRob2RcbiAgICBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICBjYWNoZURvbSgpO1xuICAgICAgICBiaW5kRXZlbnRzKCk7XG4gICAgICAgIERPTS4kbGlzdENvbnRhaW5lci5hZGRDbGFzcygnaGlkZGVuJyk7XG4gICAgfVxuICAgIFxuICAgIFxuICAgIC8vIGV4cG9ydCBwdWJsaWMgbWV0aG9kc1xuICAgIHJldHVybiB7XG4gICAgICAgIGluaXQ6IGluaXQsXG4gICAgICAgIGdldFJlcG9zOiBnZXRSZXBvc1xuICAgIH07XG5cbn0oalF1ZXJ5KSk7XG4iLCIvKiBqc2hpbnQgZXN2ZXJzaW9uOjYgKi9cbi8qIGdsb2JhbHMgalF1ZXJ5LCBjb25zb2xlLCBMUyAqL1xuXG52YXIgQmFja2dyb3VuZHMgPSAoZnVuY3Rpb24oJCkge1xuICAgIFxuICAgICd1c2Ugc3RyaWN0JztcbiAgICBcbiAgICB2YXIgRE9NID0ge30sXG4gICAgICAgIGJnQXJyID0gWycwMDEnLCAnMDAyJywgJzAwMycsICcwMDQnLCAnMDA1JywgJzAwNicsICcwMDcnLCAnMDA4J10sXG4gICAgICAgIHRvZGF5ID0gbWFrZURhdGUoKSxcbiAgICAgICAgc3RhdGUgPSBsb2FkU3RhdGUoKTtcbiAgICBcbiAgICBcbiAgICAvLyBjYWNoZSBET00gZWxlbWVudHNcbiAgICBmdW5jdGlvbiBjYWNoZURvbSgpIHtcbiAgICAgICAgRE9NLiRib2R5ID0gJCgnYm9keScpO1xuICAgIH1cbiAgICBcbiAgICBcbiAgICAvLyBtYWtlIGFuZCBmb3JtYXQgZGF0ZSBzdHJpbmdcbiAgICBmdW5jdGlvbiBtYWtlRGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKClcbiAgICAgICAgICAgIC50b0RhdGVTdHJpbmcoKSAgIC8vIGNvbnZlcnQgb2JqZWN0IHRvIGEgc3RyaW5nXG4gICAgICAgICAgICAuc2xpY2UoNCwgMTUpOyAgICAvLyBqdXN0IHdhbnQgJ01NIEREIFlZWVknXG4gICAgfVxuICAgIFxuICAgIFxuICAgIC8vIGxvYWQgc3RhdGUgZnJvbSBzdG9yYWdlXG4gICAgZnVuY3Rpb24gbG9hZFN0YXRlKCkge1xuICAgICAgICB2YXIgc3RvcmVkU3RhdGUgPSBMUy5nZXREYXRhKCdkZXYtZGFzaC1iZycpLFxuICAgICAgICAgICAgaW1nSW5keCAgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBiZ0Fyci5sZW5ndGgpLFxuICAgICAgICAgICAgbmV3U3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgaW1nTmFtZTogYmdBcnJbaW1nSW5keF0sXG4gICAgICAgICAgICAgICAgZGF0ZTogbWFrZURhdGUoKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdTdG9yZWQgU3RhdGU6ICcsIHN0b3JlZFN0YXRlKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiAoc3RvcmVkU3RhdGUpID8gc3RvcmVkU3RhdGUgOiBuZXdTdGF0ZTtcbiAgICB9XG4gICAgXG4gICAgICAgIFxuICAgIC8vIHNldCBiYWNrZ3JvdW5kIGltYWdlXG4gICAgLy8gbmV3IGltYWdlIGVhY2ggbmV3IGRheS4gU28gd2UgMXN0IGNvbXBhcmUgdG9kYXkgd2l0aFxuICAgIC8vIGxvY2FsIHN0b3JhZ2UgZGF0ZSwgdXBkYXRlIGxvY2FsIHN0b3JhZ2UgaWYgZGlmZmVyZW50LFxuICAgIC8vIGFuZCB0aGVuIHNldCB0aGUgYmFja2dyb3VuZCBpbWFnZSBDU1Mgb24gPGJvZHk+XG4gICAgZnVuY3Rpb24gcGlja0JhY2tncm91bmQoKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdUb2RheTogJywgdG9kYXkpOyAgLy8gZm9yIGRpYWdcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ1N0YXRlOiAnLCBzdGF0ZSk7ICAvLyBmb3IgZGlhZ1xuICAgICAgICBcbiAgICAgICAgdmFyIGN1cm50SW1nSW5keCA9IGJnQXJyLmluZGV4T2Yoc3RhdGUuaW1nTmFtZSksXG4gICAgICAgICAgICBuZXdJbWdJbmRleCxcbiAgICAgICAgICAgIG5ld0ltZ05hbWU7XG4gICAgICAgIFxuICAgICAgICBpZiAobmV3IERhdGUodG9kYXkpID4gbmV3IERhdGUoc3RhdGUuZGF0ZSkpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gZmluZCBuZXcgaW1hZ2UgaW5kZXhcbiAgICAgICAgICAgIG5ld0ltZ0luZGV4ID0gKGN1cm50SW1nSW5keCA9PT0gNykgPyAwIDogY3VybnRJbWdJbmR4ICsgMTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gZmluZCBuZXcgaW1hZ2Ugc3RyaW5nIG5hbWVcbiAgICAgICAgICAgIG5ld0ltZ05hbWUgPSBiZ0FycltuZXdJbWdJbmRleF07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIHNhdmUgbmV3IGltYWdlIG5hbWUgJiBkYXRlIHRvIGxvY2FsIHN0b3JhZ2UgXG4gICAgICAgICAgICBMUy5zZXREYXRhKCdkZXYtZGFzaC1iZycsIHtcbiAgICAgICAgICAgICAgICBpbWdOYW1lOiBuZXdJbWdOYW1lLFxuICAgICAgICAgICAgICAgIGRhdGU6IHRvZGF5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gdXBkYXRlIHRoZSBET01cbiAgICAgICAgICAgIHJlbmRlcihuZXdJbWdOYW1lKTtcbiAgICAgICAgICAgIFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVuZGVyKHN0YXRlLmltZ05hbWUpO1xuICAgICAgICAgICAgLy8gc2F2ZSBjdXJyZW50IGltYWdlIG5hbWUgJiBkYXRlIHRvIGxvY2FsIHN0b3JhZ2UgXG4gICAgICAgICAgICBMUy5zZXREYXRhKCdkZXYtZGFzaC1iZycsIHtcbiAgICAgICAgICAgICAgICBpbWdOYW1lOiBzdGF0ZS5pbWdOYW1lLFxuICAgICAgICAgICAgICAgIGRhdGU6IHRvZGF5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgLy8gcmVuZGVyIHRvIERPTVxuICAgIGZ1bmN0aW9uIHJlbmRlcihpbWFnZU5hbWUpIHtcbiAgICAgICAgRE9NLiRib2R5XG4gICAgICAgICAgICAuY3NzKCdiYWNrZ3JvdW5kLWltYWdlJywgJ3VybChkaXN0L2Fzc2V0cy8nICsgaW1hZ2VOYW1lICsgJy5qcGcpJyk7XG4gICAgfVxuICAgIFxuICAgIFxuICAgIC8vIHB1YmxpYyBpbml0IG1ldGhvZFxuICAgIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgIGNhY2hlRG9tKCk7XG4gICAgICAgIHBpY2tCYWNrZ3JvdW5kKCk7XG4gICAgfVxuICAgIFxuICAgIFxuICAgIC8vIHJldHVybiBwdWJsaWMgYXBpXG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5pdDogaW5pdFxuICAgIH07XG4gICAgXG59KGpRdWVyeSkpO1xuIiwiLyoganNoaW50IGVzdmVyc2lvbjo2ICovXG4vKiBnbG9iYWxzICQsIGRvY3VtZW50LCBjb25zb2xlICovXG5cbi8qIGFwcC5qcyBjYWxsIGVhY2ggbW9kdWxlJ3MgcHVibGljIG1ldGhvZChzKSAgKi9cblxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgIFxuICAgIEJhY2tncm91bmRzLmluaXQoKTtcbiAgICBcbiAgICBSZXBvU2VsZWN0LmluaXQoKTtcbiAgICBcbiAgICBHcmVldC5pbml0KCk7XG4gICAgXG4gICAgSGl0QXBpLmluaXQoKTtcbiAgICBcbiAgICBSZW5kZXJUYWJsZS5pbml0KCk7XG5cbiAgICBSZW5kZXJDaGFydC5pbml0KCk7XG5cbn0pO1xuIl19
