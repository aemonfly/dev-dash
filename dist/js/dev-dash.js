"use strict";$(document).ready(function(){HitApi.init(),RenderTable.init()});var HitApi=function(){function e(){o.$inputForm=$("#input-form")}function t(){o.$inputForm.submit(p)}function a(e){return{type:e.type,date:n(e.created_at),actor:e.actor.display_login,avatar:e.actor.avatar_url,payload:e.payload}}function n(e){return new Date(e).toDateString().slice(0,15).replace(/ 0/g," ")}function p(e){e.preventDefault();var t={url:"https://api.github.com/repos",user:e.currentTarget[0].value,repo:e.currentTarget[1].value,route:"events"},a=t.url+"/"+t.user+"/"+t.repo+"/"+t.route;$.getJSON(a).then(r)}function r(e){var t=["PushEvent","CommitCommentEvent"],n=["IssuesEvent","IssueCommentEvent","ProjectEvent","ProjectCardEvent","ProjectColumnEvent"],p=["CreateEvent","PullRequestEvent","PullRequestReviewEvent","PullRequestReviewCommentEvent"],r=e.filter(function(e){return t.indexOf(e.type)!==-1}).map(a),l=e.filter(function(e){return n.indexOf(e.type)!==-1}).map(a),o=e.filter(function(e){return p.indexOf(e.type)!==-1}).map(a);RenderTable.render(r,l,o)}function l(){e(),t()}var o={};return{init:l}}(),RenderTable=function(){function e(){l.$container=$(".table-container")}function t(e,t,r){l.$container.empty(),e.length>0&&a(e),t.length>0&&n(t),r.length>0&&p(r)}function a(e){var t=$(document.createElement("div")),a=$(document.createElement("ul"));e.forEach(function(e){if("PushEvent"===e.type)e.payload.commits.forEach(function(t){var n=$(document.createElement("li")),p=$(document.createElement("img")),r=$(document.createElement("p")),l=$(document.createElement("span")),o=$(document.createElement("a")),d=t.url.replace(/\/\/api./,"//").replace(/\/repos\//,"/").replace(/commits/,"commit");p.attr("src",e.avatar),o.attr("target","_blank").attr("href",d).html('<span class="bolder">'+t.sha.slice(0,6)+"</span>"),l.text('"'+t.message+'"'),r.append('<span class="bolder">'+e.actor+"</span> committed ").append(o).append(" on "+e.date+": ").append(l),n.append(p).append(r),a.append(n)});else{var t=$(document.createElement("li")),n=$(document.createElement("img")),p=$(document.createElement("p")),r=$(document.createElement("span")),l=$(document.createElement("a"));n.attr("src",e.avatar),l.attr("target","_blank").attr("href",e.payload.comment.html_url).html('<span class="bolder">'+e.payload.comment.commit_id.slice(0,6)+"</span>"),r.text('"'+e.payload.comment.body+'"'),p.append('<span class="bolder">'+e.actor+"</span> commented on ").append(l).append(" on "+e.date+": ").append(r),t.append(n).append(p),a.append(t)}}),a.addClass("col-list"),t.addClass("col-1of3").append("<h3>"+e.length+" Commit-Related Events</h3>").append(a),l.$container.append(t)}function n(e){var t=$(document.createElement("div")),a=$(document.createElement("ul"));e.forEach(function(e){var t=$(document.createElement("li")),n=$(document.createElement("img")),p=$(document.createElement("p")),r=$(document.createElement("a"));n.attr("src",e.avatar),r.attr("target","_blank"),"IssuesEvent"===e.type?(r.attr("href",e.payload.issue.html_url).html('<span class="bolder">issue '+e.payload.issue.number+"</span>"),p.append('<span class="bolder">'+e.actor+"</span> "+e.payload.action+" ").append(r).append(" on "+e.date+': "'+e.payload.issue.title+'"'),t.append(n).append(p),a.append(t)):"IssueCommentEvent"===e.type&&(r.attr("href",e.payload.comment.html_url).html('<span class="bolder">issue '+e.payload.issue.number+"</span>"),p.append('<span class="bolder">'+e.actor+"</span> commented on ").append(r).append(" on "+e.date+': "'+e.payload.comment.body+'"'),t.append(n).append(p),a.append(t))}),a.addClass("col-list"),t.addClass("col-1of3").append("<h3>"+e.length+" Todo-Related Events</h3>").append(a),l.$container.append(t)}function p(e){var t,a=$(document.createElement("div")),n=$(document.createElement("ul"));e.forEach(function(e){var a=$(document.createElement("li")),p=$(document.createElement("img")),r=$(document.createElement("p")),l=$(document.createElement("a"));p.attr("src",e.avatar),l.attr("target","_blank"),"CreateEvent"===e.type?(r.append(['<span class="bolder">'+e.actor+"</span>","created",e.payload.ref_type,'<span class="bolder">'+e.payload.ref+"</span>","on",e.date].join(" ")),a.append(p).append(r),n.append(a)):"PullRequestEvent"===e.type?(t=e.payload.pull_request.url.replace(/\/\/api./,"//").replace(/\/repos\//,"/").replace(/pulls/,"pull"),l.attr("href",t).html('<span class="bolder">pull request '+e.payload.pull_request.number+"</span>"),r.append('<span class="bolder">'+e.actor+"</span>").append(" "+e.payload.action+" ").append(l).append(" on "+e.date),a.append(p).append(r),n.append(a)):"PullRequestReviewEvent"===e.type?(l.attr("href",e.payload.pull_request.html_url).text(e.payload.pull_request.title),r.append([e.actor,e.payload.action,"review of "].join(" ")).append(l).append(" on"+e.date),a.append(p).append(r),n.append(a)):"PullRequestReviewCommentEvent"===e.type&&(l.attr("href",e.payload.comment.html_url).text(e.payload.comment.body),r.append(['<span class="bolder">'+e.actor+"</span>",e.payload.action,"pull request comment "].join(" ")).append(l).append(" on"+e.date),a.append(p).append(r),n.append(a))}),n.addClass("col-list"),a.addClass("col-1of3").append("<h3>"+e.length+" Merge-Related Events</h3>").append(n),l.$container.append(a)}function r(){e()}var l={};return{init:r,render:t}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
