"use strict";var HitApi=function(e){function t(){d.$inputForm=e("#input-form")}function n(){d.$inputForm.submit(r)}function a(e){return{type:e.type,date:e.created_at,actor:e.actor.display_login,avatar:e.actor.avatar_url,payload:e.payload}}function r(t,n){var a="https://api.github.com/repos",r=a+"/"+t+"/"+n+"/events";e.getJSON(r).then(o)}function o(e){var t=["PushEvent","CommitCommentEvent"],n=["IssuesEvent","IssueCommentEvent","ProjectEvent","ProjectCardEvent","ProjectColumnEvent"],r=["CreateEvent","PullRequestEvent","PullRequestReviewEvent","PullRequestReviewCommentEvent"],o=e.filter(function(e){return t.indexOf(e.type)!==-1}).map(a),l=e.filter(function(e){return n.indexOf(e.type)!==-1}).map(a),d=e.filter(function(e){return r.indexOf(e.type)!==-1}).map(a);RenderTable.render(o,l,d),RenderChart.render(e.map(a))}function l(){t(),n()}var d={};return{init:l,getEvents:r}}(jQuery),Greet=function(e){function t(){m.$greeting=e(".greeting"),m.$overlay=e('<div id="overlay"></div>'),m.$modalPrompt=e(document.createElement("div")),m.$modalError=e(document.createElement("p")),m.$modalPrompt.attr("id","user-modal").addClass("user-modal").html(f),m.$modalError.addClass("user-modal-error").html("GitHub Username Not Found"),e("body").append(m.$modalPrompt)}function n(){e("#user-modal-form").submit(a)}function a(e){e.preventDefault(),u=e.currentTarget[0].value.trim(),s=e.currentTarget[1].value.trim(),r(s).then(function(t){t.login===s&&(LS.setData("dev-dash-user",{name:e.currentTarget[0].value,githubName:e.currentTarget[1].value}),d(),i())}).catch(function(e){m.$modalPrompt.append(m.$modalError)})}function r(t){return e.getJSON("https://api.github.com/users/"+t)}function o(){var e,t=new Date,n=t.getHours();return e=n<12?"morning":n>=12&&n<17?"afternoon":"evening","Good "+e+", "+u+"."}function l(){m.$overlay.show(),m.$modalPrompt.addClass("user-modal-show")}function d(){m.$overlay.hide(),m.$modalPrompt.removeClass("user-modal-show")}function p(){var e=LS.getData("dev-dash-user");e&&e.name?(u=e.name,s=e.githubName,i()):l()}function i(){m.$greeting.text(o()),RepoSelect.getRepos(s)}function c(){t(),m.$overlay.hide(),e("body").append(m.$overlay),n(),p()}var u,s,m={},f='<form id="user-modal-form" class="Grid Grid--gutters Grid--full" action="submit">\n                    <div class="Grid-cell InputAddOn">\n                      <span class="InputAddOn-item">Your Name:</span>\n                      <input id="user-modal-name" class="InputAddOn-field" type="text" required>\n                    </div>\n                    <div class="Grid-cell InputAddOn">\n                      <span class="InputAddOn-item">GitHub User Name:</span>\n                      <input id="user-modal-username"  class="InputAddOn-field" type="text" required>\n                    </div>\n                      <div class="Grid-cell InputAddOn">\n                      <button class="InputAddOn-item" id="user-modal-button">Go!</button>\n                    </div>\n                    </form>';return{init:c}}(jQuery),LS=function(){function e(e,t){r&&r.setItem(e,JSON.stringify(t))}function t(e){if(r)return JSON.parse(r.getItem(e))}function n(){if(r)return r.clear()}function a(e){if(r)return r.removeItem(e)}var r=function(){var e,t,n=(new Date).toString();try{return e=window.localStorage,e.setItem(n,n),t=e.getItem(n)===n,e.removeItem(n),t&&e}catch(e){console.log("Problemz!")}}();return{setData:e,getData:t,deleteData:a,clearData:n}}(),RenderTable=function(e){function t(){p.$tableContainer=e(".table-container")}function n(e){return new Date(e).toDateString().slice(0,15).replace(/ 0/g," ")}function a(e,t,n){p.$tableContainer.empty(),e.length>0&&r(e),t.length>0&&o(t),n.length>0&&l(n)}function r(t){var a=e(document.createElement("div")),r=e(document.createElement("div")),o=e(document.createElement("ul"));t.forEach(function(t){var a=e(document.createElement("li")),r=e(document.createElement("img")),l=e(document.createElement("p")),d=e(document.createElement("span")),p=e(document.createElement("a"));p.attr("target","_blank"),"PushEvent"===t.type?t.payload.commits.forEach(function(e){var o=e.url.replace(/\/\/api./,"//").replace(/\/repos\//,"/").replace(/commits/,"commit");r.attr("src",t.avatar).appendTo(a),p.attr("href",o).html('<span class="bolder">'+e.sha.slice(0,6)+"</span>"),d.text('"'+e.message+'"'),l.append('<span class="bolder">'+t.actor+"</span> committed ").append(p).append(" on "+n(t.date)+": ").append(d).appendTo(a)}):(r.attr("src",t.avatar).appendTo(a),p.attr("href",t.payload.comment.html_url).html('<span class="bolder">'+t.payload.comment.commit_id.slice(0,6)+"</span>"),d.text('"'+t.payload.comment.body+'"'),l.append('<span class="bolder">'+t.actor+"</span> commented on ").append(p).append(" on "+n(t.date)+": ").append(d).appendTo(a)),a.appendTo(o)}),o.addClass("col-list").appendTo(a),r.addClass("table-col").append("<h3>"+t.length+" Commit-Related Events</h3>").append(a).appendTo(p.$tableContainer)}function o(t){var a=e(document.createElement("div")),r=e(document.createElement("ul"));t.forEach(function(t){var a=e(document.createElement("li")),o=e(document.createElement("img")),l=e(document.createElement("p")),d=e(document.createElement("a"));o.attr("src",t.avatar).appendTo(a),d.attr("target","_blank"),"IssuesEvent"===t.type?(d.attr("href",t.payload.issue.html_url).html('<span class="bolder">issue '+t.payload.issue.number+"</span>"),l.append('<span class="bolder">'+t.actor+"</span> "+t.payload.action+" ").append(d).append(" on "+n(t.date)+': "'+t.payload.issue.title+'"')):"IssueCommentEvent"===t.type&&(d.attr("href",t.payload.comment.html_url).html('<span class="bolder">issue '+t.payload.issue.number+"</span>"),l.append('<span class="bolder">'+t.actor+"</span> commented on ").append(d).append(" on "+n(t.date)+': "'+t.payload.comment.body+'"')),a.append(l).appendTo(r)}),r.addClass("col-list"),a.addClass("table-col").append("<h3>"+t.length+" Todo-Related Events</h3>").append(r).appendTo(p.$tableContainer)}function l(t){var a,r=e(document.createElement("div")),o=e(document.createElement("ul"));t.forEach(function(t){var r=e(document.createElement("li")),l=e(document.createElement("img")),d=e(document.createElement("p")),p=e(document.createElement("a"));l.attr("src",t.avatar),p.attr("target","_blank"),"CreateEvent"===t.type?d.append(['<span class="bolder">'+t.actor+"</span>","created",t.payload.ref_type,'<span class="bolder">'+t.payload.ref+"</span>","on",n(t.date)].join(" ")):"PullRequestEvent"===t.type?(a=t.payload.pull_request.url.replace(/\/\/api./,"//").replace(/\/repos\//,"/").replace(/pulls/,"pull"),p.attr("href",a).html('<span class="bolder">pull request '+t.payload.pull_request.number+"</span>"),d.append('<span class="bolder">'+t.actor+"</span>").append(" "+t.payload.action+" ").append(p).append(" on "+n(t.date))):"PullRequestReviewEvent"===t.type?(p.attr("href",t.payload.pull_request.html_url).text(t.payload.pull_request.title),d.append([t.actor,t.payload.action,"review of "].join(" ")).append(p).append(" on"+n(t.date))):"PullRequestReviewCommentEvent"===t.type&&(p.attr("href",t.payload.comment.html_url).text(t.payload.comment.body),d.append(['<span class="bolder">'+t.actor+"</span>",t.payload.action,"pull request comment "].join(" ")).append(p).append(" on"+n(t.date))),r.append(l).append(d).appendTo(o)}),o.addClass("col-list"),r.addClass("table-col").append("<h3>"+t.length+" Merge-Related Events</h3>").append(o).appendTo(p.$tableContainer)}function d(){t()}var p={};return{init:d,render:a}}(jQuery),RenderChart=function(e){function t(){m.$container=e(".chart-container"),m.$svgElem=e(document.createElementNS(f,"svg"))}function n(e){return new Date(e).toDateString().slice(0,15).replace(/ 0/g," ")}function a(e){for(var t=e.map(function(e){return n(e.date)}),a=new Date(t[0]),r=new Date(t[t.length-1]),o=[],l=a;l<=r;)o.push(n(l)),l=l.addDays(1);return o}function r(e){var t,n;return t=e.reduce(function(e,t){return Math.max(e,t[1])},e[0][1]),n=Math.floor(t/4),4*(n+1)}function o(e){var t,r,o=[],l=[];return e.forEach(function(e){"PushEvent"===e.type?e.payload.commits.forEach(function(t){o.push({actor:e.actor,avatar:e.avatar,date:e.date,payload:t,type:"Commit"})}):o.push(e)}),t=o.sort(function(e,t){return new Date(e.date)-new Date(t.date)}),r=a(t),l=r.map(function(e){return[e.slice(3,10),t.filter(function(t){return n(t.date)===e}).length]})}function l(e){return 1===e.length}function d(e,t,n){return e.map(function(e,a){return[a*t+g,h-e[1]*n-E]})}function p(t){var n=e(document.createElementNS(f,"g")),a=t.length-1,o=r(t),l=(v-g-y)/a,p=(h-E-y)/o,i=d(t,l,p);return i.forEach(function(a,r){var o=e(document.createElementNS(f,"circle")),l=e(document.createElementNS(f,"title")),d=a[0],p=a[1],i=4;o.attr("cx",d).attr("cy",p).attr("r",i),l.text(t[r][0]+" ("+t[r][1]+" events)"),o.append(l),n.addClass("chart-circle").append(o)}),n}function i(t){var n,a,o=e(document.createElementNS(f,"g")),l=t.length-1,p=r(t),i=(v-g-y)/l,c=(h-E-y)/p,u=d(t,i,c);for(n=0;n<u.length-1;n+=1)a=e(document.createElementNS(f,"line")),a.attr("x1",u[n][0]).attr("y1",u[n][1]).attr("x2",u[n+1][0]).attr("y2",u[n+1][1]),o.addClass("chart-line").append(a);return o}function c(t,n){var a,o,l,d,p,i,c,u,s,m,$=e(document.createElementNS(f,"g")),b=r(t);if("y"===n){for($.addClass("labels y-labels"),l=b>12?b/4:b,s=(h-E-y)/l,m=0;m<l+1;m+=1)u=m*b/l,c=h-E-s*m,a=e(document.createElementNS(f,"line")),a.addClass("horiz-rule").attr("x1",g).attr("y1",c).attr("x2",v-y+5).attr("y2",c),o=e(document.createElementNS(f,"text")),o.attr("x",g-20).attr("y",c+4).html(u),$.append(a).append(o);return $}if("x"===n||!n||null===n){for($.addClass("labels x-labels"),l=t.length-1,i=(v-g-y)/l,m=0;m<t.length;m+=1)t.length>20&&m%10===0?(p=t[m][0],d=m*i):(p=t[m][0],d=m*i),o=e(document.createElementNS(f,"text")),o.attr("x",d+g).attr("y",h-5).text(p).appendTo($);return $}}function u(e){var t;if(m.$svgElem.empty(),m.$svgElem.addClass("chart--content").attr("id","svg").attr("xmlns",f).attr("height","100%").attr("viewBox","0 0 "+v+" "+h).attr("xml:space","preserve"),e.length>0){if(t=o(e),l(t))return;m.$svgElem.append(c(t,"y")).append(c(t,"x")),m.$svgElem.append(i(t)),m.$svgElem.append(p(t)),m.$container.append(m.$svgElem)}}function s(){t()}var m={},f="http://www.w3.org/2000/svg",v=1e3,h=400,g=80,E=40,y=40;return Date.prototype.addDays=function(e){var t=new Date(this.valueOf());return t.setDate(t.getDate()+e),t},{init:s,render:u}}(jQuery),RepoSelect=function(e){function t(){f.$selectContainer=e(".repo-select"),f.$p=e(document.createElement("p")),f.$listContainer=e(document.createElement("div")),f.$ul=e(document.createElement("ul")),f.$newRepoForm=e(document.createElement("form")),f.$newRepoUser=e(document.createElement("input")),f.$newRepoRepo=e(document.createElement("input")),f.$newRepoBtn=e(document.createElement("button"))}function n(){f.$selectContainer.on("click",".repo-select-highlight",a),f.$ul.on("click","div.li-descriptions",r),f.$ul.on("click","span.li-remove",o),f.$newRepoForm.on("submit",l)}function a(e){e.stopPropagation(),f.$listContainer.toggleClass("hidden")}function r(e){e.stopPropagation();var t=e.currentTarget.children[0].innerHTML.split(" / ");m=t[1],i(v),HitApi.getEvents(t[0],t[1]),f.$listContainer.addClass("hidden")}function o(t){t.stopPropagation();var n=(t.target.previousElementSibling.dataset.repo,e(t.target).parent()),a=n.attr("id");v.splice(a,1),n.remove(),LS.setData("dev-dash-repos",v)}function l(t){t.preventDefault(),t.stopPropagation();var n="https://api.github.com/repos",a=t.currentTarget[0].value,r=t.currentTarget[1].value;e.getJSON(n+"/"+a+"/"+r).then(function(e){return v.unshift(e),f.$newRepoUser[0].value="",f.$newRepoRepo[0].value="",v}).then(p).then(i).catch(function(e){console.warn("Error fetching repo.")})}function d(e){if(e&&e.length){e.forEach(function(e){v.push(e)});var t=v[0].full_name.split("/");return m=t[1],HitApi.getEvents(t[0],t[1]),e}}function p(e){return LS.setData("dev-dash-repos",v),e}function i(t){t&&t.length?(f.$ul.html(""),t.forEach(function(t,n){var a=e(document.createElement("li"));a.attr("id",n).html('<div class="li-descriptions" data-repo="'+t.name+'">\n                             <p>'+t.owner.login+" / "+t.name+"</p>\n                             <p>"+t.description+'</p>\n                           </div>\n                           <span class="li-remove">&#10060</span>'),f.$ul.append(a)}),c()):(console.log("no repos, holmes"),c(),f.$listContainer.removeClass("hidden"))}function c(){f.$newRepoBtn.html("+"),f.$newRepoUser.attr("required","true").attr("placeholder","author"),f.$newRepoRepo.attr("required","true").attr("placeholder","repo"),f.$newRepoForm.addClass("new-repo-form").append(f.$newRepoUser).append(f.$newRepoRepo).append(f.$newRepoBtn),f.$listContainer.addClass("repo-list").append(f.$ul).append(f.$newRepoForm),f.$p.html('You are currently viewing the <span class="repo-select-highlight">'+m+"&#x25BC;</span> repository."),f.$selectContainer.append(f.$p).append(f.$listContainer)}function u(t){h?(d(LS.getData("dev-dash-repos")),i(v)):e.getJSON("https://api.github.com/users/"+t+"/repos?sort=updated").then(function(e){return e.slice(0,3)}).then(d).then(p).then(i)}function s(){t(),n(),f.$listContainer.addClass("hidden")}var m,f={},v=[],h=function(){return!!LS.getData("dev-dash-repos")}();return{init:s,getRepos:u}}(jQuery),Backgrounds=function(e){function t(){d.$body=e("body")}function n(){return(new Date).toDateString().slice(4,15)}function a(){var e=LS.getData("dev-dash-bg"),t=Math.floor(Math.random()*p.length),a={imgName:p[t],date:n()};return e?e:a}function r(){var e,t,n=p.indexOf(c.imgName);new Date(i)>new Date(c.date)?(e=7===n?0:n+1,t=p[e],LS.setData("dev-dash-bg",{imgName:t,date:i}),o(t)):(o(c.imgName),LS.setData("dev-dash-bg",{imgName:c.imgName,date:i}))}function o(e){d.$body.css("background-image","url(dist/assets/"+e+".jpg)")}function l(){t(),r()}var d={},p=["001","002","003","004","005","006","007","008"],i=n(),c=a();return{init:l}}(jQuery);$(document).ready(function(){Backgrounds.init(),RepoSelect.init(),Greet.init(),HitApi.init(),RenderTable.init(),RenderChart.init()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
