"use strict";var HitApi=function(){function e(){l.$inputForm=$("#input-form")}function t(){l.$inputForm.submit(a)}function n(e){return{type:e.type,date:e.created_at,actor:e.actor.display_login,avatar:e.actor.avatar_url,payload:e.payload}}function a(e,t){var n="https://api.github.com/repos",a=n+"/"+e+"/"+t+"/events";$.getJSON(a).then(r)}function r(e){var t=["PushEvent","CommitCommentEvent"],a=["IssuesEvent","IssueCommentEvent","ProjectEvent","ProjectCardEvent","ProjectColumnEvent"],r=["CreateEvent","PullRequestEvent","PullRequestReviewEvent","PullRequestReviewCommentEvent"],o=e.filter(function(e){return t.indexOf(e.type)!==-1}).map(n),l=e.filter(function(e){return a.indexOf(e.type)!==-1}).map(n),p=e.filter(function(e){return r.indexOf(e.type)!==-1}).map(n);RenderTable.render(o,l,p),RenderChart.render(e.map(n))}function o(){e(),t()}var l={};return{init:o,getEvents:a}}(),Greet=function(e){function t(){m.$greeting=e(".greeting"),m.$overlay=e('<div id="overlay"></div>'),m.$modalPrompt=e(document.createElement("div")),m.$modalError=e(document.createElement("p")),m.$modalPrompt.attr("id","user-modal").addClass("user-modal").html(f),m.$modalError.addClass("user-modal-error").html("GitHub Username Not Found"),e("body").append(m.$modalPrompt)}function n(){e("#user-modal-form").submit(a)}function a(e){e.preventDefault(),u=e.currentTarget[0].value.trim(),s=e.currentTarget[1].value.trim(),r(s).then(function(t){t.login===s&&(LS.setData("dev-dash-user",{name:e.currentTarget[0].value,githubName:e.currentTarget[1].value}),p(),i())}).catch(function(e){m.$modalPrompt.append(m.$modalError)})}function r(t){return e.getJSON("https://api.github.com/users/"+t)}function o(){var e,t=new Date,n=t.getHours();return e=n<12?"morning":n>=12&&n<17?"afternoon":"evening","Good "+e+", "+u+"."}function l(){m.$overlay.show(),m.$modalPrompt.addClass("user-modal-show")}function p(){m.$overlay.hide(),m.$modalPrompt.removeClass("user-modal-show")}function d(){var e=LS.getData("dev-dash-user");e&&e.name?(u=e.name,s=e.githubName,i()):l()}function i(){m.$greeting.text(o()),RepoSelect.getRepos(s)}function c(){t(),m.$overlay.hide(),e("body").append(m.$overlay),n(),d()}var u,s,m={},f='<form id="user-modal-form" class="Grid Grid--gutters Grid--1of2" action="submit">\n                    <div class="Grid-cell InputAddOn">\n                      <span class="InputAddOn-item">Your Name:</span>\n                      <input id="user-modal-name" class="InputAddOn-field" type="text" required>\n                    </div>\n                    <div class="Grid-cell InputAddOn">\n                      <span class="InputAddOn-item">GitHub User Name:</span>\n                      <input id="user-modal-username"  class="InputAddOn-field" type="text" required>\n                    </div>\n                      <div class="Grid-cell InputAddOn">\n                      <button class="InputAddOn-item" id="user-modal-button">Go!</button>\n                    </div>\n                    </form>';return{init:c}}(jQuery),LS=function(){function e(e,t){r&&r.setItem(e,JSON.stringify(t))}function t(e){if(r)return JSON.parse(r.getItem(e))}function n(){if(r)return r.clear()}function a(e){if(r)return r.removeItem(e)}var r=function(){var e,t,n=(new Date).toString();try{return e=window.localStorage,e.setItem(n,n),t=e.getItem(n)===n,e.removeItem(n),t&&e}catch(e){console.log("Problemz!")}}();return{setData:e,getData:t,deleteData:a,clearData:n}}(),RenderTable=function(){function e(){p.$tableContainer=$(".table-container")}function t(e){return new Date(e).toDateString().slice(0,15).replace(/ 0/g," ")}function n(e,t,n){p.$tableContainer.empty(),e.length>0&&a(e),t.length>0&&r(t),n.length>0&&o(n)}function a(e){var n=$(document.createElement("div")),a=$(document.createElement("div")),r=$(document.createElement("ul"));e.forEach(function(e){if("PushEvent"===e.type)e.payload.commits.forEach(function(n){var a=$(document.createElement("li")),o=$(document.createElement("img")),l=$(document.createElement("p")),p=$(document.createElement("span")),d=$(document.createElement("a")),i=n.url.replace(/\/\/api./,"//").replace(/\/repos\//,"/").replace(/commits/,"commit");o.attr("src",e.avatar),d.attr("target","_blank").attr("href",i).html('<span class="bolder">'+n.sha.slice(0,6)+"</span>"),p.text('"'+n.message+'"'),l.append('<span class="bolder">'+e.actor+"</span> committed ").append(d).append(" on "+t(e.date)+": ").append(p),a.append(o).append(l),r.append(a)});else{var n=$(document.createElement("li")),a=$(document.createElement("img")),o=$(document.createElement("p")),l=$(document.createElement("span")),p=$(document.createElement("a"));a.attr("src",e.avatar),p.attr("target","_blank").attr("href",e.payload.comment.html_url).html('<span class="bolder">'+e.payload.comment.commit_id.slice(0,6)+"</span>"),l.text('"'+e.payload.comment.body+'"'),o.append('<span class="bolder">'+e.actor+"</span> commented on ").append(p).append(" on "+t(e.date)+": ").append(l),n.append(a).append(o),r.append(n)}}),r.addClass("col-list"),n.append(r),a.addClass("table-col").append("<h3>"+e.length+" Commit-Related Events</h3>").append(n),p.$tableContainer.append(a)}function r(e){var n=$(document.createElement("div")),a=$(document.createElement("ul"));e.forEach(function(e){var n=$(document.createElement("li")),r=$(document.createElement("img")),o=$(document.createElement("p")),l=$(document.createElement("a"));r.attr("src",e.avatar),l.attr("target","_blank"),"IssuesEvent"===e.type?(l.attr("href",e.payload.issue.html_url).html('<span class="bolder">issue '+e.payload.issue.number+"</span>"),o.append('<span class="bolder">'+e.actor+"</span> "+e.payload.action+" ").append(l).append(" on "+t(e.date)+': "'+e.payload.issue.title+'"'),n.append(r).append(o),a.append(n)):"IssueCommentEvent"===e.type&&(l.attr("href",e.payload.comment.html_url).html('<span class="bolder">issue '+e.payload.issue.number+"</span>"),o.append('<span class="bolder">'+e.actor+"</span> commented on ").append(l).append(" on "+t(e.date)+': "'+e.payload.comment.body+'"'),n.append(r).append(o),a.append(n))}),a.addClass("col-list"),n.addClass("table-col").append("<h3>"+e.length+" Todo-Related Events</h3>").append(a),p.$tableContainer.append(n)}function o(e){var n,a=$(document.createElement("div")),r=$(document.createElement("ul"));e.forEach(function(e){var a=$(document.createElement("li")),o=$(document.createElement("img")),l=$(document.createElement("p")),p=$(document.createElement("a"));o.attr("src",e.avatar),p.attr("target","_blank"),"CreateEvent"===e.type?(l.append(['<span class="bolder">'+e.actor+"</span>","created",e.payload.ref_type,'<span class="bolder">'+e.payload.ref+"</span>","on",t(e.date)].join(" ")),a.append(o).append(l),r.append(a)):"PullRequestEvent"===e.type?(n=e.payload.pull_request.url.replace(/\/\/api./,"//").replace(/\/repos\//,"/").replace(/pulls/,"pull"),p.attr("href",n).html('<span class="bolder">pull request '+e.payload.pull_request.number+"</span>"),l.append('<span class="bolder">'+e.actor+"</span>").append(" "+e.payload.action+" ").append(p).append(" on "+t(e.date)),a.append(o).append(l),r.append(a)):"PullRequestReviewEvent"===e.type?(p.attr("href",e.payload.pull_request.html_url).text(e.payload.pull_request.title),l.append([e.actor,e.payload.action,"review of "].join(" ")).append(p).append(" on"+t(e.date)),a.append(o).append(l),r.append(a)):"PullRequestReviewCommentEvent"===e.type&&(p.attr("href",e.payload.comment.html_url).text(e.payload.comment.body),l.append(['<span class="bolder">'+e.actor+"</span>",e.payload.action,"pull request comment "].join(" ")).append(p).append(" on"+t(e.date)),a.append(o).append(l),r.append(a))}),r.addClass("col-list"),a.addClass("table-col").append("<h3>"+e.length+" Merge-Related Events</h3>").append(r),p.$tableContainer.append(a)}function l(){e()}var p={};return{init:l,render:n}}(),RenderChart=function(){function e(){u.$container=$(".chart-container"),u.$svgElem=$(document.createElementNS(s,"svg"))}function t(e){return new Date(e).toDateString().slice(0,15).replace(/ 0/g," ")}function n(e){for(var n=e.map(function(e){return t(e.date)}),a=new Date(n[0]),r=new Date(n[n.length-1]),o=[],l=a;l<=r;)o.push(t(l)),l=l.addDays(1);return o}function a(e){var t,n;return t=e.reduce(function(e,t){return Math.max(e,t[1])},e[0][1]),n=Math.floor(t/4),4*(n+1)}function r(e){var a,r,o=[],l=[];return e.forEach(function(e){"PushEvent"===e.type?e.payload.commits.forEach(function(t){o.push({actor:e.actor,avatar:e.avatar,date:e.date,payload:t,type:"Commit"})}):o.push(e)}),a=o.sort(function(e,t){return new Date(e.date)-new Date(t.date)}),r=n(a),l=r.map(function(e){return[e.slice(3,10),a.filter(function(n){return t(n.date)===e}).length]})}function o(e){return 1===e.length}function l(e){var t=$(document.createElementNS(s,"g")),n=e.length-1,r=a(e),o=(m-v-g)/n,l=(f-h-g)/r,p=e.map(function(e,t){return[t*o+v,f-e[1]*l-h]});return p.forEach(function(n,a){var r=$(document.createElementNS(s,"circle")),o=$(document.createElementNS(s,"title")),l=n[0],p=n[1],d=4;r.attr("cx",l).attr("cy",p).attr("r",d),o.text(e[a][0]+" ("+e[a][1]+" events)"),r.append(o),t.addClass("chart-circle").append(r)}),t}function p(e){var t,n,r=$(document.createElementNS(s,"g")),o=e.length-1,l=a(e),p=(m-v-g)/o,d=(f-h-g)/l,i=e.map(function(e,t){return[t*p+v,f-e[1]*d-h]});for(t=0;t<i.length-1;t+=1)n=$(document.createElementNS(s,"line")),n.attr("x1",i[t][0]).attr("y1",i[t][1]).attr("x2",i[t+1][0]).attr("y2",i[t+1][1]),r.addClass("chart-line").append(n);return r}function d(e,t){var n,r,o,l,p,d,i,c,u,E,y,b=$(document.createElementNS(s,"g")),C=a(e);if(E=e.reduce(function(e,t){return Math.max(e,t[1])},e[0][1]),"y"===t){for(b.addClass("labels y-labels"),o=C>12?C/4:C,u=(f-h-g)/o,y=0;y<o+1;y+=1)c=y*C/o,i=f-h-u*y,n=$(document.createElementNS(s,"line")),n.addClass("horiz-rule").attr("x1",v).attr("y1",i).attr("x2",m-g+5).attr("y2",i),r=$(document.createElementNS(s,"text")),r.attr("x",v-20).attr("y",i+4).html(c),b.append(n).append(r);return b}if("x"===t||!t||null===t){for(b.addClass("labels x-labels"),o=e.length-1,d=(m-v-g)/o,y=0;y<e.length;y+=1)e.length>20?y%10===0&&(p=e[y][0],l=y*d,r=$(document.createElementNS(s,"text")),r.attr("x",l+v).attr("y",f-5).text(p),b.append(r)):(p=e[y][0],l=y*d,r=$(document.createElementNS(s,"text")),r.attr("x",l+v).attr("y",f-5).text(p),b.append(r));return b}}function i(e){var t;if(u.$svgElem.empty(),u.$svgElem.addClass("chart--content").attr("id","svg").attr("xmlns",s).attr("height","100%").attr("viewBox","0 0 "+m+" "+f).attr("xml:space","preserve"),e.length>0){if(t=r(e),o(t))return;u.$svgElem.append(d(t,"y")).append(d(t,"x")),u.$svgElem.append(p(t)),u.$svgElem.append(l(t)),u.$container.append(u.$svgElem)}}function c(){e()}var u={},s="http://www.w3.org/2000/svg",m=1e3,f=400,v=80,h=40,g=40;return Date.prototype.addDays=function(e){var t=new Date(this.valueOf());return t.setDate(t.getDate()+e),t},{init:c,render:i}}(),RepoSelect=function(e){function t(){f.$selectContainer=e(".repo-select"),f.$p=e(document.createElement("p")),f.$listContainer=e(document.createElement("div")),f.$ul=e(document.createElement("ul")),f.$newRepoForm=e(document.createElement("form")),f.$newRepoUser=e(document.createElement("input")),f.$newRepoRepo=e(document.createElement("input")),f.$newRepoBtn=e(document.createElement("button"))}function n(){f.$selectContainer.on("click",".repo-select-highlight",a),f.$ul.on("click","div.li-descriptions",r),f.$ul.on("click","span.li-remove",o),f.$newRepoForm.on("submit",l)}function a(e){e.stopPropagation(),f.$listContainer.toggleClass("hidden")}function r(e){e.stopPropagation();var t=e.currentTarget.children[0].innerHTML.split(" / ");m=t[1],i(v),HitApi.getEvents(t[0],t[1]),f.$listContainer.addClass("hidden")}function o(t){t.stopPropagation();var n=(t.target.previousElementSibling.dataset.repo,e(t.target).parent()),a=n.attr("id");v.splice(a,1),n.remove(),LS.setData("dev-dash-repos",v)}function l(t){t.preventDefault(),t.stopPropagation();var n="https://api.github.com/repos",a=t.currentTarget[0].value,r=t.currentTarget[1].value;e.getJSON(n+"/"+a+"/"+r).then(function(e){return v.unshift(e),f.$newRepoUser[0].value="",f.$newRepoRepo[0].value="",v}).then(d).then(i).catch(function(e){console.warn("Error fetching repo.")})}function p(e){if(e&&e.length){e.forEach(function(e){v.push(e)});var t=v[0].full_name.split("/");return m=t[1],HitApi.getEvents(t[0],t[1]),e}}function d(e){return LS.setData("dev-dash-repos",v),e}function i(t){t&&t.length?(f.$ul.html(""),t.forEach(function(t,n){var a=e(document.createElement("li"));a.attr("id",n).html('<div class="li-descriptions" data-repo="'+t.name+'">\n                             <p>'+t.owner.login+" / "+t.name+"</p>\n                             <p>"+t.description+'</p>\n                           </div>\n                           <span class="li-remove">&#10060</span>'),f.$ul.append(a)}),c()):(console.log("no repos, holmes"),c(),f.$listContainer.removeClass("hidden"))}function c(){f.$newRepoBtn.html("+"),f.$newRepoUser.attr("required","true").attr("placeholder","author"),f.$newRepoRepo.attr("required","true").attr("placeholder","repo"),f.$newRepoForm.addClass("new-repo-form").append(f.$newRepoUser).append(f.$newRepoRepo).append(f.$newRepoBtn),f.$listContainer.addClass("repo-list").append(f.$ul).append(f.$newRepoForm),f.$p.html('You are currently viewing the <span class="repo-select-highlight">'+m+"&#x25BC;</span> repository."),f.$selectContainer.append(f.$p).append(f.$listContainer)}function u(t){h?(p(LS.getData("dev-dash-repos")),i(v)):e.getJSON("https://api.github.com/users/"+t+"/repos?sort=updated").then(function(e){return e.slice(0,3)}).then(p).then(d).then(i)}function s(){t(),n(),f.$listContainer.addClass("hidden")}var m,f={},v=[],h=function(){return!!LS.getData("dev-dash-repos")}();return{init:s,getRepos:u}}(jQuery),Backgrounds=function(){function e(){l.$body=$("body")}function t(){return(new Date).toDateString().slice(4,15)}function n(){var e=LS.getData("dev-dash-bg"),n=Math.floor(Math.random()*p.length),a={imgName:p[n],date:t()};return e?e:a}function a(){var e,t,n=p.indexOf(i.imgName);new Date(d)>new Date(i.date)?(e=7===n?0:n+1,t=p[e],LS.setData("dev-dash-bg",{imgName:t,date:d}),r(t)):(r(i.imgName),LS.setData("dev-dash-bg",{imgName:i.imgName,date:d}))}function r(e){l.$body.css("background-image","url(dist/assets/"+e+".jpg)")}function o(){e(),a()}var l={},p=["001","002","003","004","005","006","007","008"],d=t(),i=n();return{init:o}}();$(document).ready(function(){Backgrounds.init(),RepoSelect.init(),Greet.init(),HitApi.init(),RenderTable.init(),RenderChart.init()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
